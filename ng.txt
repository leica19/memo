AngularJSには、主に次のような2つの特徴があります。

HTMLに記述していくテンプレート

双方向データバインディング

AngularJSが得意なこと・苦手なこと

設計や実装をある程度強制され、それに従うことで、コード量が削減されたり、
実装者による品質の差を小さくするなど、生産性が大きく向上することが期待できます。

アニメーションをバリバリに効かせた、
インタラクティブなWebアプリケーションなどは、
あまりAngularJSは向いていません。

あまりアニメーションなどの派手な動きを必要としない、
たとえば、業務用アプリケーションや、サービスの管理画面など、
データの変更やそれにともなうUIの描画処理が頻発するようなアプリケーションには向いています。

AngularJSはそういった用途で利用すると、
生産性を大きく向上させる可能性のあるフレームワークではないかと思います。

React：
Virtual DOMを特徴とするViewに特化したライブラリ。
View以外の実装や、設計の方針などは提供しない

テンプレートとしてのHTML

検索ボックスにテキストを入力すると、
入力に応じてリストの項目がフィルタリングされる、
いわゆるインクリメンタル検索の動きになっています。

これをライブラリなどを使わず素のJavaScriptで実装するとしましょう。
この場合、検索ボックスにイベントを張って値を取得し、
マッチしたテキストを表示、マッチしなかった要素は非表示にするなど、
多くの処理を書く必要がありますが、
AngularJSでは次のように、とても簡単にこのような機能を実装できます。

<!DOCTYPE html>
<html lang="ja" ng-app="myApp">
<head>
<meta charset="utf-8">
<title>AngularJS incremental search demo</title>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.5.8/angular.min.js"></script>
</head>
<body>

<script>
  angular.module('myApp', [])
    .controller('MainCtrl', function($scope) {
      $scope.people = [
        { firstName: 'Kazuhito', lastName: 'Hokamura' },
        { firstName: 'Takeshi',  lastName: 'Takatsudo' },
        { firstName: 'Akihiro',  lastName: 'Oyamada' },
        { firstName: 'Kazunori',  lastName: 'Tokuda' },
        { firstName: 'Yukihisa',  lastName: 'Yamada' },
      ];
    });
</script>

<div ng-controller="MainCtrl">
  <input type="search" placeholder="Search" ng-model="search">
  <ul ng-repeat="person in people | filter:search">
    <li>{{person.firstName}} {{person.lastName}}</li>
  </ul>
</div>
</body>
</html>

このような処理がほとんどJavaScriptでロジックを書かずに実現できていることがわかります。
データとUIを双方向に結び付け、UIが変更されれば自動的にデータが変更され*、
データが変更されると自動的にUIが変更されます。

<!DOCTYPE html>
<html lang="ja" ng-app>
<head>
<meta charset="utf-8">
<title>AngularJS bindinig demo</title>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.5.8/angular.min.js"></script>
</head>
<body>
<input type="text" ng-model="name">
<div>Hello {{name}}!</div>
</body>
</html>

ng-model="name"という属性がinput要素に付加されています。
これによってこのテキストボックスに入力された文字は、ngアプリの内部ではnameというデータとして保持され、
入力されるたびにnameというデータは更新されます。

nameというデータが更新されると、
HTMLに埋め込まれている{{name}}というAngularJSのテンプレートタグの部分も、
nameデータと紐付いており、
nameデータが変更されると自動的に{{name}}の部分が再描画されます。

このようにnameというデータと、
それに紐付けられたUIが双方向に同期するのが双方向データバインディングです。
データとUIが自動的に同期される処理を自分で書くのはかなり面倒な処理となりますが、
それをすべてAngularJSが自動的にやってくれるので、大幅にコード量が削減されます。

***

<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.5.8/angular.min.js"></script>

AngularJSは他に依存するライブラリはないのでこれだけです。

次に、HTMLで、html要素にng-appという属性を付加します。

<!DOCTYPE html>
<html lang="ja" ng-app>
...
</html>

ng-appを付加した要素以下が、ngの処理の対象となります。
body要素やdiv要素に付加することもできますが、html属性に付加することが多いようです。

ngでは、アプリごとにモジュールをつくり、
アプリ関するJSの処理は基本的にすべてそのモジュールに紐付けていきます。

JSでangular.module()を使って、新規モジュールを作成します。
ここではmyAppという名前でモジュールを定義します。

var app = angular.module('myApp', []);

第二引数の値には配列を指定しますが、ここにはmyAppモジュールが依存するモジュールを記述します。
たとえばAjax通信を便利に使うことができるようになるngResourceという公式のモジュールを使いたい場合は、
angular-resource.jsを別途読み込み、次のように指定します。

var app = angular.module('myApp', ['ngResource']);

モジュールを新規作成する場合は、
依存するモジュールがなくても第二引数には空の配列を指定する点に注意してください。
第二引数を指定しない場合、モジュールの作成ではなく、既存モジュールの取得という意味になるからです。

そして、html要素のng-app属性にモジュール名を指定します。

<html ng-app="myApp">
...
</html>

これによってmyAppモジュールを使ってngが自動的にアプリのセットアップを行います。
ngではこのセットアップをブートストラップと呼んでいます。

モジュールの使い方

このようにして作ったモジュールを使って、
コントローラーやディレクティブといったアプリケーションの機能を定義することができます。

var app = angular.module('myApp', []);

// コントローラーを定義
app.controller('MainCtrl', function($scope) {

});

// ディレクティブを定義
app.directive('myDirective', function() {
  // ...
});

angular.module()の第二引数を指定せずに呼び出すと
myAppモジュールをどこからでも取得できるため、
ファイルごとにコントローラーやディレクティブを分ける場合に便利

var app = angular.module('myApp');

AngularJSを使わないアプリケーションでは、
グローバル領域にひとつネームスペースを作って、
その下にモデルやビューなどの機能を作っていくことが多いのですが、
AngularJSのモジュールはそれと同じようなことを、
グローバルのネームスペースを汚さずにできると考えればわかりやすい

AngularJSを使わない場合

window.myApp = {};

// Modelを定義
myApp.TodoModel = function() {
  // ...
};

// Viewを定義
myApp.TodoView = function() {
  // ...
};

コントローラーの定義

AngularJSのコントローラーは、
ビューにスコープを作り、そのふるまいなどを定義します。

コントローラーを定義するにはHTMLでng-controller属性にコントローラー名を指定し、
app.controllerメソッドにそのコントローラー名を指定します。

コントローラーの名前に決まりはありませんが、
AngularJSの公式サイトなどでは、MainCtrlなどのように、
大文字から始めてCtrlを後ろに付けるという規則が多い

<div ng-controller="MainCtrl">
  <!-- ... -->
</div>

var app = angular.module('myApp', []);

app.controller('MainCtrl', function($scope) {
  // ...
});

コントローラーの関数が引数として受け取る$scopeというオブジェクトが、
ngにおいて重要になる。

$scopeオブジェクト

<div ng-controller="MainCtrl">
  <input type="text" ng-model="name">
  <div>Hello {{name}}!</div>
</div>

テキストボックスの値が変われば、
表示も変わりますが、このときnameのデータを保持しているのが
コントローラーに渡される$scopeオブジェクトです。

ng-modelが指定されたテキストボックスの値が変わると、
$scope.nameの値が自動的に変更され、
$scope.nameの値が変更されれば自動的にビューに反映されるということになります。

コントローラーの関数で
以下のように定義することでnameの初期値を設定することができます。

app.controller('MainCtrl', function($scope) {
  $scope.name = 'da';
});

初期表示で$scope.nameに設定した文字列が表示されており、
$scopeの値がビューに紐付いていることがわかります。

# コントローラーのスコープ

コントローラーはアプリケーションの中に複数つくることができ、
その場合別々のスコープで動作するようになります。

<div ng-controller="FirstCtrl">
  <input type="text" ng-model="name">
  <div>Hello {{name}}!</div>
</div>

<div ng-controller="SecondCtrl">
  <input type="text" ng-model="name">
  <div>Hello {{name}}!</div>
</div>

app.controller('FirstCtrl', function($scope) {
});

app.controller('SecondCtrl', function($scope) {
});

片方のテキストボックスの入力を変更しても、
もう片方には影響していないのがわかります。
これはコントローラーごとにスコープが分かれていることを意味します。

----------------
ディレクティブは、AngularJSにおいて、
ViewとModelの双方向バインドを実現するための根幹的な仕組みである。

ディレクティブは、開発者から見ると、Templateの要素・属性として現れる。
----------------

列挙型

JavaScriptが元々備えている型ではないものの、
TypeScript仕様の中では基本的な型として位置付けられているものに列挙型があります。
列挙型というのは整数の連番に名前を割り振ったリストのようなものです。

書き方は以下のように
num 識別子 { 列挙する内容, ... }となっています。
この例では、Menuという識別子で列挙型を定義した上で、
その列挙型Menuを引数に受け取ることを明示した関数cookを定義してみました。

enum Menu {
  Onigiri,
  Misoshiru,
  TamagoYaki
}

function cook(menu: Menu) {
  switch(menu) {
    case Menu.Onigiri:
      // ...
      break;
    case Menu.Misoshiru:
      // ...
      break;
    case Menu.TamagoYaki:
      // ...
      break;
    default:
      // ...
      break;
  }
}

cook(Menu.Onigiri);

Menu.Onigiriに格納されているのは数値の0で、
Menu.Misoshiruは1、
Menu.TamagoYakiは2と連番が付与されています。
つまり、このswitch文は
整数で条件分岐をしていることになります。
ですが、case 0: ... case 1: ...と数値で書かれてもなんのことかわからなくなってしまいます。

そうしたときに整数の連番にラベルをつけられると、わかりやすくて便利というわけです。

クラス

class Person {
    name:string;
    age:number;

    constructor(name:string, age:number) {
        this.name = name;
        this.age = age;
    }

    say():void {
        console.log("Hello, I'm " + this.name + ".");
    }
}

インスタンスフィールドに
name、ageをそれぞれstring、numberの型注釈を付けて定義、
コンストラクタは、この2つのフィールドに受け取った引数を渡します。

インスタンスメソッドの例としてsay()も定義してみました。
文法の細かい点としては、
メソッドの定義にfunctionのキーワードは不要となっています。

このとき生成されるJavaScriptのコードは次のようになり、
コンストラクタとプロトタイプオブジェクトの定義を行う関数を定義、
即時実行した結果を変数Personに代入する方式となっています。

var Person = (function () {
    function Person(name, age) {
        this.name = name;
        this.age = age;
    }
    Person.prototype.say = function () {
        console.log("Hello, I'm " + this.name + ".");
    };
    return Person;
})();

またこのとき、
Personという型も新たに定義されたことになっており、
これのインスタンスはPerson型を持つことになります。
ですので、
Personクラスのインスタンスを受け取るように制約を設けたいという場合に、
次のように型注釈としてPersonという値を使うことができます。

var john: Person = new Employee("john", 22);

そして、この例はもう少し簡潔に書くこともできます。
コンストラクタが、引数にインスタンスフィールドの初期値を取る場合、
そのフィールドの宣言は省略することができます。
どういうことかコードで示したものが、次の例になります。

この定義方法によって
フィールドの宣言はなくなりましたが、
これでも上と同じJavaScriptコードが生成されます。
引数の前に加えられたpublicはアクセス修飾子というものです

# アクセス修飾子

次に、コンストラクタの引数に加えられたpublicについてです。
ここでは他にprivateという修飾子も指定でき、
これが、そのフィールドへの外部からのアクセス可否を指定するものになります。

例えば、ageフィールド用の引数がprivate age:numberという受け取り方になっていた場合、
インスタンスからそのフィールドにアクセスすることはできません。

var john: Person = new Person("john", 32);
console.log(bob.age);
// =>error TS2107: 'Person.age' is inaccessible.

こうして直接アクセスしてもらいたくないフィールドを明示的にprivateの記述で示し、
実際の挙動としてもこれを防ぐことができます。

なお、アクセス修飾子のデフォルトはpublicであり、
何も指定しない場合は自動的にこちらが宣言されたものとして扱われます。

この場合でも、生成されるJavaScriptのコードに変化がおこるわけではありません。
生成コードにプライベートなフィールドを用意する仕組みが加えられるわけではなく、
それよりも前の段階で、
TypeScriptのコンパイラが
プライベートへのアクセスを見つけて
エラーを伝えるという働きをしています。

# static修飾子

インスタンスではなく、
クラスに関連付けられたフィールドやメソッドを定義するには、
次のようにstaticの修飾子を用います。

class Utils {
    static benri(str:string):void {
        // 便利ななにか
    }

    static sugokuBenri(num:number):void {
        // すごく便利な何か
    }

    static HOGE_ID:number = 123;
}

このときに生成されるJavaScriptのコードは以下のようになっていて、Utils.benri = ...のようにコンストラクタそのものにメソッドが追加されていることがわかります。

var Utils = (function () {
    function Utils() {
    }
    Utils.benri = function (str) {
        // 便利ななにか
    };

    Utils.sugokuBenri = function (num) {
        // すごく便利な何か
    };

    Utils.HOGE_ID = 123;
    return Utils;
})();

こうしたクラスメソッドやクラスフィールドは、
そのクラスと関係が強いので一緒にしておきたいけれど、
個々のインスタンスに持たせる必要はないといった定数、
あるいは同様に、個々のインスタンスフィールドを利用していないメソッド、
といったものを定義したいときに活用することができます。

# アクセサ

フィールドのセッター・ゲッターメソッドを定義するset、getといったキーワードを使うこともできます。
この機能はインスタンスフィールドへの値の代入時に
セッター・ゲッターと呼ばれるメソッドを経由させることを可能にします。

使用場面としては、
プライベートにしたフィールドと併せて用いることで、
インスタンスのフィールドへ直接アクセスされることを禁止して、
セッター・ゲッターメソッドを経由したアクセス方法にまとめることができます。

こうしておくことで、
あるクラスに内部構造の変更が発生した場合でも、
セッター・ゲッターメソッドの処理を修正すれば、
そのフィールドにアクセスしているさまざまなコードは
変更をせずに済むといった利点があります。

ただし、これを使用する場合、
ECMAScript5仕様であるObject.defineProperty()の使われたJavaScriptコードが生成されることになります。
併せて、コンパイル時のオプションに--target ES5を指定する必要もあります。

それでは、コードを見ていきましょう。
先ほどのクラスを少し変えて、
プライベートなフィールド_ageに対する窓口となるセッターset age(age:number) {...}と
ゲッターget age():number {...}を定義してみました。
このとき引数と戻り値の型注釈は省略できません。
また、当然ですが同じ型を指定する必要があります。

lass Person {
    constructor(public name:string, private _age:number) {
    }

    set age(age:number) {
        console.log("set " + age);
        this._age = age;
    }

    get age():number {
        console.log("get " + this._age);
        return this._age;
    }
}

var bob:Person = new Person("Bob", 32);
var age = bob.age;1 // Person.get age()
bob.age = age + 1;  // Person.set age()

bob.ageの値を読もうとすると、
ゲッターメソッド内へ目印に挟んでおいたconsole.log("get " + this._age);が呼ばれています。
値を代入しようとした場合も同様に、セッターメソッド側に挟んだ目印のconsole.log(...);も呼ばれていて、
フィールドへの参照や代入を行うごとにセッター・ゲッターメソッドが呼ばれていることがわかります。

# モジュール

次はモジュールです。
「モジュール」と呼ばれる仕組みは他の言語にもあります。
TypeScriptにおけるモジュールというのは、
単純にオブジェクトを定義して、
その中で変数や関数、クラスを整理していたのをもっと扱いやすくしたものになります。

JavaScriptを書いていて、
名前空間を分けておきたいといった場合に、
一番簡単な方法というのが次の例だと思います。

var App = {};
App.Model = {};
App.View = {};

これが、TypeScriptでは次のように表現することができます。

module App {
    module Model {
        ...
    }
    module View {
        ...
    }
}

実際にはmoduleだけ書いたところで中身がないと、
実際のJavaScriptコードには
何も生成されていないので、
App.ModelとApp.Viewにクラスを定義してみましょう。

さきほどから登場しているPersonクラスを、
状態を管理するApp.Model.Personと、
画面へのレンダリングを行うApp.View.Person
という役割にわけるとしたら、
という例でそれぞれ定義してみます。

module App.Model {
  export class Person {
    constructor(private name: string, private age: number) {
    }
    say(): void {
      console.log("hello" + this.name);
    }
  }
}

module App.View {
  export class Person {
    constructor(private model: App.Model.Person) {
    }
  }
}

インスタンスは以下のように作ることができます。

var bob = new App.Model.Person("bob", 32);
console.log(bob);

var bobview = new App.Model.Person(bob);
console.log(bobview);

moduleの階層を表現するには、
最初の例のように入れ子にした記述をしてもよいですし、
上のように.ドットで繋げた記述をすることもできます。

App.Model.Personはこれまでの例と同様の形で、
App.View.Personは
App.Model.Personのインスタンスをコンストラクタの引数に取るように定義してみました。
モジュール内に定義されたクラスの型は、
モジュール名を含めたApp.Model.Personといった形で定義されています。
App.View.Personクラスのコンストラクタ引数にある型注釈が
private model:App.Model.Personとなっていて、
それに従っていることがわかると思います。

この例でモジュール内に定義したApp.Model.Personは、
デフォルトでは同じモジュールである
App.Modelの中に定義した関数やクラスからしかアクセスすることはできません。
それを解消して、例えばApp.Viewモジュールからも参照できるようにするには
exportを、モジュール内のそれぞれの値の定義の先頭に付けてあげます。

モジュールについても、
最初に挙げたvar App = {};の方法でもそうですが、
こうして名前空間を整理していくことは、
コードが多くなることが判っていて、ファイルやクラス・関数を分割していきたい場合、
コードのわかりやすさを求める上で有効な方法です。
TypeScriptがとりわけ大きな規模の案件に向くというのは、
こういった手法をサポートする仕組みを備えている点からも実感することができるのではないかと思います。
