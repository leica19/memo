AngularJSには、主に次のような2つの特徴があります。

HTMLに記述していくテンプレート

双方向データバインディング

AngularJSが得意なこと・苦手なこと

設計や実装をある程度強制され、それに従うことで、コード量が削減されたり、
実装者による品質の差を小さくするなど、生産性が大きく向上することが期待できます。

アニメーションをバリバリに効かせた、
インタラクティブなWebアプリケーションなどは、
あまりAngularJSは向いていません。

あまりアニメーションなどの派手な動きを必要としない、
たとえば、業務用アプリケーションや、サービスの管理画面など、
データの変更やそれにともなうUIの描画処理が頻発するようなアプリケーションには向いています。

AngularJSはそういった用途で利用すると、
生産性を大きく向上させる可能性のあるフレームワークではないかと思います。

React：
Virtual DOMを特徴とするViewに特化したライブラリ。
View以外の実装や、設計の方針などは提供しない

テンプレートとしてのHTML

検索ボックスにテキストを入力すると、
入力に応じてリストの項目がフィルタリングされる、
いわゆるインクリメンタル検索の動きになっています。

これをライブラリなどを使わず素のJavaScriptで実装するとしましょう。
この場合、検索ボックスにイベントを張って値を取得し、
マッチしたテキストを表示、マッチしなかった要素は非表示にするなど、
多くの処理を書く必要がありますが、
AngularJSでは次のように、とても簡単にこのような機能を実装できます。

<!DOCTYPE html>
<html lang="ja" ng-app="myApp">
<head>
<meta charset="utf-8">
<title>AngularJS incremental search demo</title>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.5.8/angular.min.js"></script>
</head>
<body>

<script>
  angular.module('myApp', [])
    .controller('MainCtrl', function($scope) {
      $scope.people = [
        { firstName: 'Kazuhito', lastName: 'Hokamura' },
        { firstName: 'Takeshi',  lastName: 'Takatsudo' },
        { firstName: 'Akihiro',  lastName: 'Oyamada' },
        { firstName: 'Kazunori',  lastName: 'Tokuda' },
        { firstName: 'Yukihisa',  lastName: 'Yamada' },
      ];
    });
</script>

<div ng-controller="MainCtrl">
  <input type="search" placeholder="Search" ng-model="search">
  <ul ng-repeat="person in people | filter:search">
    <li>{{person.firstName}} {{person.lastName}}</li>
  </ul>
</div>
</body>
</html>

このような処理がほとんどJavaScriptでロジックを書かずに実現できていることがわかります。
データとUIを双方向に結び付け、UIが変更されれば自動的にデータが変更され*、
データが変更されると自動的にUIが変更されます。

<!DOCTYPE html>
<html lang="ja" ng-app>
<head>
<meta charset="utf-8">
<title>AngularJS bindinig demo</title>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.5.8/angular.min.js"></script>
</head>
<body>
<input type="text" ng-model="name">
<div>Hello {{name}}!</div>
</body>
</html>

ng-model="name"という属性がinput要素に付加されています。
これによってこのテキストボックスに入力された文字は、ngアプリの内部ではnameというデータとして保持され、
入力されるたびにnameというデータは更新されます。

nameというデータが更新されると、
HTMLに埋め込まれている{{name}}というAngularJSのテンプレートタグの部分も、
nameデータと紐付いており、
nameデータが変更されると自動的に{{name}}の部分が再描画されます。

このようにnameというデータと、
それに紐付けられたUIが双方向に同期するのが双方向データバインディングです。
データとUIが自動的に同期される処理を自分で書くのはかなり面倒な処理となりますが、
それをすべてAngularJSが自動的にやってくれるので、大幅にコード量が削減されます。

***

<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.5.8/angular.min.js"></script>

AngularJSは他に依存するライブラリはないのでこれだけです。

次に、HTMLで、html要素にng-appという属性を付加します。

<!DOCTYPE html>
<html lang="ja" ng-app>
...
</html>

ng-appを付加した要素以下が、ngの処理の対象となります。
body要素やdiv要素に付加することもできますが、html属性に付加することが多いようです。

ngでは、アプリごとにモジュールをつくり、
アプリ関するJSの処理は基本的にすべてそのモジュールに紐付けていきます。

JSでangular.module()を使って、新規モジュールを作成します。
ここではmyAppという名前でモジュールを定義します。

var app = angular.module('myApp', []);

第二引数の値には配列を指定しますが、ここにはmyAppモジュールが依存するモジュールを記述します。
たとえばAjax通信を便利に使うことができるようになるngResourceという公式のモジュールを使いたい場合は、
angular-resource.jsを別途読み込み、次のように指定します。

var app = angular.module('myApp', ['ngResource']);

モジュールを新規作成する場合は、
依存するモジュールがなくても第二引数には空の配列を指定する点に注意してください。
第二引数を指定しない場合、モジュールの作成ではなく、既存モジュールの取得という意味になるからです。

そして、html要素のng-app属性にモジュール名を指定します。

<html ng-app="myApp">
...
</html>

これによってmyAppモジュールを使ってngが自動的にアプリのセットアップを行います。
ngではこのセットアップをブートストラップと呼んでいます。

モジュールの使い方

このようにして作ったモジュールを使って、
コントローラーやディレクティブといったアプリケーションの機能を定義することができます。

var app = angular.module('myApp', []);

// コントローラーを定義
app.controller('MainCtrl', function($scope) {

});

// ディレクティブを定義
app.directive('myDirective', function() {
  // ...
});

angular.module()の第二引数を指定せずに呼び出すと
myAppモジュールをどこからでも取得できるため、
ファイルごとにコントローラーやディレクティブを分ける場合に便利

var app = angular.module('myApp');

AngularJSを使わないアプリケーションでは、
グローバル領域にひとつネームスペースを作って、
その下にモデルやビューなどの機能を作っていくことが多いのですが、
AngularJSのモジュールはそれと同じようなことを、
グローバルのネームスペースを汚さずにできると考えればわかりやすい

AngularJSを使わない場合

window.myApp = {};

// Modelを定義
myApp.TodoModel = function() {
  // ...
};

// Viewを定義
myApp.TodoView = function() {
  // ...
};

コントローラーの定義

AngularJSのコントローラーは、
ビューにスコープを作り、そのふるまいなどを定義します。

コントローラーを定義するにはHTMLでng-controller属性にコントローラー名を指定し、
app.controllerメソッドにそのコントローラー名を指定します。

コントローラーの名前に決まりはありませんが、
AngularJSの公式サイトなどでは、MainCtrlなどのように、
大文字から始めてCtrlを後ろに付けるという規則が多い

<div ng-controller="MainCtrl">
  <!-- ... -->
</div>

var app = angular.module('myApp', []);

app.controller('MainCtrl', function($scope) {
  // ...
});

コントローラーの関数が引数として受け取る$scopeというオブジェクトが、
ngにおいて重要になる。

$scopeオブジェクト

<div ng-controller="MainCtrl">
  <input type="text" ng-model="name">
  <div>Hello {{name}}!</div>
</div>

テキストボックスの値が変われば、
表示も変わりますが、このときnameのデータを保持しているのが
コントローラーに渡される$scopeオブジェクトです。

ng-modelが指定されたテキストボックスの値が変わると、
$scope.nameの値が自動的に変更され、
$scope.nameの値が変更されれば自動的にビューに反映されるということになります。

コントローラーの関数で
以下のように定義することでnameの初期値を設定することができます。

app.controller('MainCtrl', function($scope) {
  $scope.name = 'da';
});

初期表示で$scope.nameに設定した文字列が表示されており、
$scopeの値がビューに紐付いていることがわかります。

# コントローラーのスコープ

コントローラーはアプリケーションの中に複数つくることができ、
その場合別々のスコープで動作するようになります。

<div ng-controller="FirstCtrl">
  <input type="text" ng-model="name">
  <div>Hello {{name}}!</div>
</div>

<div ng-controller="SecondCtrl">
  <input type="text" ng-model="name">
  <div>Hello {{name}}!</div>
</div>

app.controller('FirstCtrl', function($scope) {
});

app.controller('SecondCtrl', function($scope) {
});

片方のテキストボックスの入力を変更しても、
もう片方には影響していないのがわかります。
これはコントローラーごとにスコープが分かれていることを意味します。

----------------
ディレクティブは、AngularJSにおいて、
ViewとModelの双方向バインドを実現するための根幹的な仕組みである。

ディレクティブは、開発者から見ると、Templateの要素・属性として現れる。
----------------

# コントローラーのネスト

また、コントローラーは、自身の子孫要素に別のコントローラーを作ることもできます。

<div ng-controller="ParentCtrl">
  <input type="text" ng-model="name">
  <div ng-controller="ChildCtrl">
    <div>Hello {{name}}!</div>
  </div>
</div>

app.controller('ParentCtrl', function($scope) {
});

app.controller('ChildCtrl', function($scope) {
});

ネストした場合でも、
親子のコントローラーはそれぞれ独立したスコープを持ちます。
上記のHTMLの、ng-model="name"のnameと、
Hello {{name}}!のnameは、
それぞれのコントローラーの$scopeを参照します。
ただし、$scopeオブジェクトそのものは、
親コントローラーから子コントローラーへと継承されます。

ParentCtrlのinputの値を変更すると、
ChildCtrlへと変更が伝わっているのがわかると思います。
ChildCtrlではParentCtrlの$scopeを継承しているため、
ParentCtrlで変更された$scope.nameプロパティの値の変更は、
自動的にChildCtrlの$scope.nameへと引き継がれるのです。

#

ng-controllerの属性値を、[ControllerName] as [propertyName]と書くことで、
コントローラーのインスタンスを、[propertyName]で受け取ることができます。
これをController As記法と言います。

<div ng-controller="ParentCtrl as parent">
  <input type="text" ng-model="parent.name">
  <div ng-controller="ChildCtrl as child">
    <input type="text" ng-model="parent.name">
    <div>Hello {{parent.name}}!</div>
  </div>
</div>

app.controller('ParentCtrl', function() {
  this.name = 'hokaccha';
});

app.controller('ChildCtrl', function() {
});

# DOMイベント

AngularJSでは、
clickやsubmitなど、DOM要素を対象としたイベントを扱う場合、
コントローラーのメソッドに関数（イベントハンドラ）を定義し、
それをイベントが発生したときに呼び出すことができます。

div ng-controller="MainCtrl as vm">
  <input type="text" ng-model="vm.name">
  <button ng-click="vm.onClickBtn()">reverse</button>
  <div>Hello {{vm.name}}!</div>
</div>

app.controller('MainCtrl', function() {
  var vm = this;
  vm.name = 'hokaccha';

  vm.onClickBtn = function() {
    // 文字列を反対にする
    vm.name = vm.name.split('').reverse().join('');
  };
});

# windowやdocumentを対象としたイベント
