
RxJsとは、リアクティブ・プログラミングという考え方のもとに構築されているライブラリ

いつ起こるかわからない処理の扱いを、一貫性を持って書くことができる。

***********

端的にいうと、JSのイベントのハンドリングや非同期処理をラップし、扱いやすくするためのライブラリ

もともと2009年にマイクロソフト社によってC＃用に開発されたRx.NETというライブラリのJavaScript向けの移植で、
他にもRxの名を冠するライブラリがさまざまな言語向けに移植されています。
そのため、RxJSを学ぶと他の言語向けのRx利用者とも同じ土俵で会話ができるという、おもしろい背景がある。

「いつ起こるかわからない処理」について、我々はどのようなコードを書いてきたのか

JSでは、往々にしてイベントをハンドリングしなければならない場面がでできます。クリックされたときの処理、
スクロールしたら値を変更、ウィンドウのリサイズに応じて位置を調整、など。
これらのイベントは、ユーザーがいつその操作をするかわかりません。つまり、いつ起こるかわからない処理といえます。

いつ起こるかわからない処理に対して、JSにおいては、関数を引数に指定することで、そのときの処理内容を記述します。

この引数に指定しているのは、Func Objで、俗にコールバック、リスナー、ハンドラーなどの名前で呼ばれているものです。

ex:

window.addEventListener('scroll', () => {
  console.log(window.pageYOffset)
})

簡単な処理であれば、まだ処理の全容を把握することができます。
しかし、ここにひとたび何十行もの手続きが書かれてしまうと、その処理は追いにくいものとなってしまいます。

たとえば、通常のクリック、Altキーを押しながらのクリック、シフトキーを押しながらのクリックに応じて、
それぞれ処理を分けて書きたいとしましょう。

const buttonEl = document.querySelector('#click-me')

buttonEl.addEventListener('click', ev => {
  const spanE1 = document.createElement('span')
  if (ev.altKey) {
    spanE1.innerText = 'altKey'
  } else if (ev.shiftKey) {
    spanE1.innerText = 'shiftKey'
  } else {
    spanE1.innerText = 'clicked'
  }
  resultEl.appendChild(spanE1)
})

このように、リスナー関数の引数evを扱い、プロパティaltKey, shiftKeyの状態をif文内で検証し分岐する例です。

このようにソースコードの上から処理を下記、途中で分岐したり繰り返したりするプログラミング手法を手続き型と呼びます。

手続き型では、求める動作そのものが構造化されておらず、上から順に書かれることが起こりやすいです。
その結果、長い行数のコードは読みにくく、変更しにくいものとなっていきます。

コードが長くなったとき、しばしば処理を別の関数に分割するリファクタリングを行うことがあります。
ただ、分割をしたり、そもそも長い処理を書かないように気をつけるかどうかは、指針がなければ、人それぞれとなってしまいます。

昨今のWebアプリケーションではクリック、スクロール、ドラッグ、ドロップ、どの操作をとっても高度な処理を求められることが増えました。
そのため、保守しやすい開発を心がけようとすると、
イベントハンドリングの処理は、肥大化に注意しながら組みたてていくことが求められるようになります。

非同期通信処理

JSは、シングルスレッドで動作する言語ですが、それゆえに非同期処理を多用する文化となりました。
XHRを使ったHTTP通信では、onreadystatechangeにイベントハンドラーを登録することで、
通信中に続きの処理をブロックせずに先に進めて、通信完了の状態を受け取ったときにハンドラーに登録した処理を実行することができます。
このHTTP通信をラップして、より使いやすくしたものがQueryの$.ajax()でした。

のちに、JSは言語レベルでPromiseが実装されるようになりました。
Promiseは現代JSに置ける非同期を扱う形式として、もはやおなじみになり、XHRに続くHTTP通信用のAPIとして策定されたfetchも
このPromiseを返すようになります。

ただ、単一のPromiseは、通信状態を表しているオブジェクトではなく、あくまでも「戻ってくることが約束された値」です。
何らかの待ちが発生する処理：HTTP通信に対して、そこから戻ってくる値を表しているにすぎず、
複数の通信結果を組み合わせた処理を書く場合に、Promiseでは煩雑になりがちです。

例えば、複数のAPIの結果を使わなければならない場面を考えてみましょう。
AというAPIのレスポンスに含まれる値を、BというAPIのリクエストボディに含まなければならない。
Promiseのthen()の中で再度、別のAPIを呼び、またthen()を書くということになり、
読みづらくなります。

fetch('some/api/a'
  .then(res => {
    const id = res.id
    fetch('some/api/b', { method: 'POST', body: {id} })
      .then(res => {
        // BのAPIの完了処理
      })
  })

Promiseのthen()コールバックでは、この関数の戻り値としてPromiseを返すこともできます。
そして、Promiseを返した時、then()を続けて書くことができます。

fetch('some/api/a'
  .then(res => {
    const id = res.id
    return fetch('some/api/b', { method: 'POST', body: {id} })
    })
    .then(res => {
      // BのAPIの完了処理
    })

  少しシンプルになりました。

  ただし、このアプローチでは求めた結果は得られたとしても、
  まだ問題が残ります。
  この例では、複数のPromiseを合わせただけで、コードの書き方にも幅が生まれています。書き方に幅があるということは、
  指針を決めない限りチームで開発する上で、さまざまな書き方ができてしまう可能性があるということです。
  これではアプリケーションを通しての一貫性が失われてしまいがちです。

複数人のエンジニアで開発していくとき、アプリケーションの規模が大きくなるにつれて、
徐々に一貫性のズレは保守しにくいものとなります。これは、コードを読む際の引っ掛かりにも繋がっていきます。

JavaScript開発において、頻繁に対応しなければならない「いつ起こるかわからない処理」は、処理を関数オブジェクトとしてまとまった単位で書かなければならない性質上、人によって書き方がぶれてしまうことがありえます。if文で分岐が繰り返される長大な処理、複数のAPIを呼ぶための.then()チェーンの連なり。こんな処理を何か一貫性を持って捌けないでしょうか？
それを達成できるライブラリがRxJSです。

リアクティブプログラミング

ライブラリの名前にもあるRxとは、略称で、省略しなければReactive Extensionsという言葉になります。
では、ここにでてくる「リアクティブ」とはどういう意味でしょうか。

あるひとつのプログラミングの考え方を表す言葉として「プログラミングパラダイム」というものがあります。たとえば「オブジェクト指向プログラミング」はパラダイムのひとつで、他にもさまざまなパラダイムがあります。

その中のひとつ「リアクティブプログラミング」というパラダイムが、今回紹介するものです。リアクティブプログラミングはしばしばRPとも書かれます。

RPとは、時間と共に変化する値に対する操作を宣言的に記述していくプログラミング・パラダイムです。

時間と共に変化する値とは、たとえばタイマー、マウスカーソルやスクロールの位置、HTTP経由で送られてくるデータなどです。

つまり、これまでに説明した「いつ起こるかわからない処理」の全般をさします。

そして、これら時間とともに変化する値のひとまとまりを、
ストリーム（stream）と呼んで扱います。

# 宣言的に記述する

ストリームに対して操作を宣言的に記述するとは、どういうことか説明します。

buttonEl.addEventListener('click', ev => {
  const spanE1 = document.createElement('span')
  if (ev.altKey) {
    spanE1.innerText = 'altKey'
  } else if (ev.shiftKey) {
    spanE1.innerText = 'shiftKey'
  } else {
    spanE1.innerText = 'clicked'
  }
  resultEl.appendChild(spanE1)
})

これは、前節で紹介したイベントハンドリングの例です。
今後if文が増えていったり、中の処理が多くなると、見通しが悪くなる懸念がある、というものでした。
これをストリームとして扱うとどうなるでしょうか。

const buttonClick$ = Rx.Observable.fromEvent(buttonEl, 'click')

buttonClick$
  .filter(ev => !ev.altKey && !ev.shiftKey)
  .subscribe(ev => {
    const spanE1 = document.createElement('span')
    spanE1.innerText = 'clicked'
    resultEl.appendChild(spanE1)
  })

  buttonClick$
    .filter(ev => ev.altKey)
    .subscribe(ev => {
    const spanEl = document.createElement('span')
      spanEl.innerText = 'altKey!'
      resultEl.appendChild(spanEl)
    })

    buttonClick$
    .filter(ev => ev.shiftKey)
    .subscribe(ev => {
      const spanEl = document.createElement('span')
      spanEl.innerText = 'shiftKey!'
      resultEl.appendChild(spanEl)
    })

クリックイベントをストリームとしてｒ扱うために登場するのがRxJSです。
ストリームを作成するために、ここではRx.Observable.fromEvent()というAPIを使っています*。

ここではJSのDOMイベントをストリームに変換するものと考えて下さい。

一見するとif文よりさらに長くなってしまったように見えます。
そこで、subscribe()に注目してみましょう。
subscribe()もRxJSのAPIのひとつです。
時間とともに変化する値がどうなっているか観測するためのAPIで、addEventListener()のリスナー関数に相当します。

ボタンがクリックされたら、subscribe()の中の関数が作動します。
ここまでは、addEventListener()とよく似ています。
つづいて、その前に書かれた.filter()を見てみましょう。
.filter()を書くことで、ストリームはそのフィルタがtrueを返すときにしか先に流れ￥ません。
こうすることで、addEventListener（）との大きな違いとして、subscribe()にはif文がひとつも出てきません。

if文のないコードはよいものです。
なぜなら関数の引数に値が入力されてから、戻り値として出力されるまでの処理が常に一定となるからです。
常に一定であるということは引数を与えるだけで戻り値が確定し、デバックがとてもやりやすいものとなります。

今回の例では、条件分岐させるための条件を、filter()内に、
行いたい処理そのものをsubscribe（）に分けて別々の関数にしたことで、それぞれの関数内ではif文が登場せず、
関数単位のデバックが容易になりました。

このように、特定の条件下で結果が一定となるように、
条件と処理を宣言的に書いていく。そして複数の小さく単純な関数を組み合わせることで、達成したい処理を作っていく。
このプログラミング手法がリアクティブ・プログラミングです。

# PromiseをRxJSで扱う

addEventListener()の代わりに
RxJSでイベントを同様に扱えるようにするAPIがObservable.fromEvent()でした。

もうひとつ「いつ起こるかわからない処理」として紹介したPromiseについても、RxJSで扱えます。
それがObservable.fromPromise()です。

// Promiseを返す処理
const fetchPromise = fetch('path/to')

// fromPromise()でストリーム化
const response$ = Rx.Observable.fromPromise(fetchPromise)

Promiseをストリームとして扱うためには、fromPromise()にPromiseを渡すだけなので、
とても簡単です。そのストリームに流れる値の処理には、then()の代わりにsubscribe()を使います。

RxJsは、ライブラリとしてRPの手法をまとまった単位にしたことで、
このライブラリを採用するプロジェクト全体にRPを浸透させやすくしている

https://app.codegrid.net/entry/2017-rxjs-1
https://app.codegrid.net/entry/2017-rxjs-2

RxJSの始め方

RxJSはnpmのパッケージとして提供されています。そしてCDN経由でも読み込めるため、
そのまま<script>タグで読み込んで使うことも可能です。
CDNから読み込むとすぐにコードを書き始めることができるので、
アプリケーションにいきなり組み込む前にちょっとRxJSの挙動を確認したいというときに手軽に始められます。

<script src="https://unpkg.com/@reactivex/rxjs@5.4.0/dist/global/Rx.js"></script>

RxJSの基本的な処理

イベントや非同期処理の結果などをストリームに変換して一貫性を持って扱うためのライブラリ

基本的な事項

もっともシンプルな例

イベントや非同期処理の結果などをストリームに変換する

ストリームの購読を開始し、それらに対して処理を行う

ストリームの購読を終了する。

イベントをストリームに変換して処理する

１：ストリームへの変換

Rx.Observable
  .fromEvent(document, 'scroll')

Observable.fromEvent()がイベントをストリームに変換している部分です。
先頭のRxは、CDN経由でRxJSを読み込んだときに格納されるグローバル変数です。
fromEvent()は２つの引数を持ちます。
第一引数にはイベントが発生するDOM要素、第二引数にはイベント名を与えます。

ここでは、第一引数にスクロールする要素documentを、第二引数のイベント名には'scroll'を与えます。

この１行で、ページをスクロールするごとにスクロールイベントがストリーム内を流れるようになります。

ただし、この時点ではストリームに変換しているだけですので、何も起きません。

２：ストリームの購読を開始する

Rx.Observable
  .fromEvent(document, 'scroll')
  .subscribe(ev => {
    document.querySelector('#result').innerText = ev.target.body.scrollTop
    const alpha = ev.target.body.scrollTop / 5000
    ev.target.body.style.background = `rgba(0, 0, 128, ${alpha})`
  })

ストリーム内を流れるイベントに応じた処理を書けるようにするには、.subscribe()をつなげて書きます。
.subscribe()とつなげれば、そのストリームを購読し、そこに流れる値が処理できる。
.subscribeの引数には、関数を渡します。

.subscribeはObservableインスタンスが持つメソッドです。
Observable.fromEvent()はこのObservableインスタンスを返すメソッドなので、
このようにドットをつなげてチェーンとして記述できるのです。

ストリームの購読を終了する

subscribeでスクロールイベントを取得し、
イベントが起こるたびに任意の処理をすることができる

しかし、このままでは、不要なときでも、スクロールが発生するたびに処理が動いてしまっています。
全体のパフォーマンスが下がります。
そして、常にイベントの発生を待ち受けている必要があるため、ブラウザ内でもメモリが確保され続けることになり、
これはメモリリークの原因につながります。

不要になったら購読を終了する必要がある。
unsubscribeです。

先の例でのsubscribeには戻り値があります。
この戻り値をSubscriptionインスタンスと呼びます。

そしてこのSubscriptionインスタンスにunsubscribe()メソッドが備わっています。
これには引数がありませんので、単に呼ぶだけとなります。

subscription.unsubscribe()で購読を終了します。

const subscription = Rx.Observable
  .fromEvent(document, 'scroll')
  .subscribe(ev => {
    document.querySelector('#result').innerText = ev.target.body.scrollTop
    const alpha = ev.target.body.scrollTop / 5000
    ev.target.body.style.background = `rgba(0, 0, 128, ${alpha})`
  })

subscription.unsubscribe()

RxJSはsubscribe()すればストリームに流れる値を処理でき、
unsubscribe()すればそれが止まることがわかりました。

実装においては、この購読の開始と停止をきちんとコントロールする必要があります。

「購読開始」ボタンを押すまでは、
スクロールしても何も変化がありません。
つづいて「購読開始」ボタンを押してからスクロールすると背景色が変化するようになります。
そして「購読停止」ボタンを押してみましょう。
すると、またスクロールしても背景色が変化しないようになります。

const subscriptions = []
const scroll$ = Rx.Observable.fromEvent(document, 'scroll')

const start = (stream) => {
  subscriptions.push(
    stream.subscribe(ev => {
      const alpha = ev.target.body.scrollTop / 5000
      ev.target.body.background = `rgba(0, 0, 128, ${alpha})`
    })
  )
}

const stop = () => {
  subscriptions.forEach(subscription => {
    subscription.unsubscribe()
  })
}

const subscribeEl = document.querySelector('#subscribe')
Rx.Observable
  .fromEvent(subscribeEl, 'click')
  .subscribe(() => {
    start(scroll$)
  })

const unsubscribeEl = document.querySelector('#unsubscribe')
Rx.Observable
  .fromEvent(unsubscribeEl, 'click')
  .subscribe(() => {
    stop()
  })

const subscriptions = []は
購読停止に必要なSubscriptionインスタンスを保持しておくための受け皿となる配列です

const scroll$はdocumentをスクロールしたときのイベントを流すストリームの生成です。

subscribe()するまで処理はされません。
ストリームは作成するだけでは、何ら処理が働くものではなく、
subscribe()しなければパフォーマンスに負担を与えるものにはなりません。
