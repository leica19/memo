
TestCafeは、
E2Eでブラウザテストを自動化するためのフレームワークです。

# TestCafeの特徴

TestCafeは最初のコミットが2015年の4月、
最初のリリースが2016年10月と比較的新しいE2Eテストフレームワークといえます。

そのため、
async/awaitの使用を前提にAPIが設計されていたり、
importするモジュールがなるべく最小限になるような工夫がされていたりと、
ほかのE2Eテストフレームワークと比較すると、
モダンなJavaScriptでテストが非常に書きやすい作りになっています。

また、
自動待機のメカニズムによって、
ページ読み込みとXHRの完了だけでなく、
DOM要素の表示も待機するように作られているため、
待機するための専用APIを呼び出す必要がありません。

Webアプリケーション用のE2Eテストフレームワークと聞くと、
真っ先に思い浮かぶのはSeleniumではないでしょうか？
E2Eテストフレームワークの中でも有名なNightwatch
やProtractorを含め、
多くのE2Eテストフレームワーク
がSelenium（WebDriver）と連携して動作します。

TestCafeはそれらフレームワークと一線を画すもので、
Seleniumをまったく使用しないE2Eテストフレームワークです。
Seleniumを使用するフレームワークと比較すると、次のような特徴があります。

# テスト環境の構築が容易

TestCafeはテスト環境を容易に構築することができます。
SeleniumではWebDriverのクライアントとテストを実行する各ブラウザのWebDriverをインストールする必要があります。
一方、TestCafeであればnpmを通じてTestCafeをインストールすれば、
それだけでテスト環境が整ったことになります。設定ファイルも必要ありません。

また、TestCafeの開発者の1人であるIvan Nikulin氏によると、
Seleniumで使用されるWebDriverは各ブラウザベンダーによって開発されており、
それが互換性の問題を引き起こすことを、Seleniumを使用しない理由の1つとして挙げています。

# インストールされていない環境でもテストが実行可能

TestCafeだけでなくNode.jsすらインストールされていない環境であっても、
テストを実行することが可能です。
その場合、TestCafeが出力するURLを対象の環境のブラウザで開くだけでテストが開始されます。
これはモバイル端末にも当てはまります。
ただし、TestCafeがインストールされているホストと対象とするデバイスが、
同一ネットワーク上に存在する必要があります。

# テストコードはJavaScriptのみ

SeleniumはJavaScript以外にもJava、Ruby、Python、C#でもテストを書くことが可能ですが、
TestCafeはJavaScriptでしかテストを書くことができません。

クロスブラウザのテストサービスについて

BrowserStack、Sauce LabsといったWeb上でクロスブラウザのテストを行うサービスのために
TestCafeからプラグインが提供されています。

    testcafe-browser-provider-browserstack
    testcafe-browser-provider-saucelabs

ただし、それでもこれらサービスを利用する際には注意が必要です。
これらサービスが提供するSeleniumへのサポートが必要なケースでは、
TestCafeは適さないかもしれません。
たとえば、BrowserStackにはE2Eテストの動画を自動的に撮影する機能に加え、
各アクション（ページ遷移、クリックなど）時のスクリーンショットをキャプチャする機能がありますが、
2017年9月現在これはSeleniumにしかサポートされていません。

# TestCafeのインストール

TestCafeを理解するには、
実際にインストールしてテストを書いて体験してみるのがよいでしょう。
前述したようにTestCafeの環境構築は非常に簡単です。
インストールは、次のコマンドを実行するだけです。
問題なくインストールされれば、それだけでTestCafeのテスト環境が整ったことになります。

npm install -g testcafe

次のコマンドでバージョン確認をして、
バージョン番号が表示されれば、正常にインストールされています。

testcafe -v
0.17.1

# テストの実行

それでは、
実際にテストを書いて実行してみましょう。
デモ用の簡単なアンケートフォームを用意したので、このフォームをテストするためのコードを用意します。

このアンケートフォームには次の機能が実装されています。

    名前が必須項目であり、
    入力しないと送信ボタンを押しても送信されず、エラーメッセージが表示される。
    アンケートの送信前にブラウザの確認ダイアログが表示され、
    キャンセル選択すると送信されず、OKを押すと送信される。
    送信後、サンクスページに遷移して「（入力された名前）様、
    アンケートにお答えいただき、ありがとうございました。」というメッセージが表示される。

これらの動作のうち、「名前を入力して送信すると、
名前が入力されたサンクスページが表示される」という動作を確認してみたいと思います。

アンケートフォームをテストするためのtest.jsという名前のファイルを作成して、
次のコードを貼り付けてください。

import {Selector} from 'testcafe';

fixture('アンケートフォーム')
  .page('https://cdn.codegrid.net/2017-testcafe/demo/1.html');

test('必要項目を入力後、送信して遷移先を確認', async t => {
  const userName   = await Selector('#user-name');
  const submitButton = await Selector('#submit-button');
  await t
    .setNativeDialogHandler(() => true)
    .typeText(userName, 'ピクセルグリオ')
    .click(submitButton);
  await t.expect(Selector('#thanks-message').innerText).eql('ピクセルグリオ様、アンケートにお答えいただき、ありがとうございました。');
});

コードの文法などは、
次回詳しく解説します。ここではtest.jsに書かれていることをざっと説明します。

    アンケートフォームのページを開く
    ユーザー名の入力欄とフォーム送信ボタンの要素の参照を取得
    確認ダイアログで「OK」を選択するようにあらかじめ設定する
    ユーザー名の入力欄に"ピクセルグリオ"と入力する
    フォーム送信ボタンをクリックする
    サンクスページに期待されるメッセージが表示されているか確認する

ファイルを作成したら、
そのファイルと同じディレクトリ内で
コンソールから次のコマンドを実行してください。
このコマンドは、
TestCafeにChromeとSafariのブラウザでtest.jsのテストの実行するように指示しています。

    testcafe chrome,safari ./test.js

    自動的にブラウザが立ち上がり、テストが実行されます。

その結果がコンソール上に表示されるはずです。

  % testcafe chrome,safari ./test.js
    Running tests in:
    - Chrome 59.0.3071 / Mac OS X 10.12.6
    - Safari 10.1.2 / Mac OS X 10.12.6

    アンケートフォーム
    ✓ 必要項目を入力後、送信して遷移先を確認

     1 passed (3s)

それぞれのローカルで、
使用可能なブラウザの種類は、コマンドに-b（または、--list-browsers）オプションを
付けて実行することで確認することができます。

     % testcafe -b
     chrome
     safari
     firefox

E2Eテストは
ブラウザ用のドライバのインストールによる環境設定や
待機用のカスタムコードの記述など、
実際に実行を成功させるまでのハードルが高い傾向にありますが、
TestCafeであれば導入から実行まで、比較的スムーズに作業を進めることができたのではないでしょうか。

これに加えてE2Eのテストに関するすべてのことが
JavaScript（Node.js）で完結することも大きなメリット

これまでブラウザ上でE2Eテストを実施する場合、
Seleniumが必須というケースがほとんどだったと思いますが、
筆者はTestCafeの登場によって選択肢が1つ増えたと捉えています。

# テスト構成について

アンケートのテストを例に、
TestCafeのAPIの構成とコードについて確認してみましょう。

# fixtureとtest

TestCafeによるコードの大まかな構成は下記のようになります。
基本的には、
下記のようにまず始めに
fixtureの処理が1つだけ書かれ、
その後に続いて
testの処理が並ぶ構成になるはずです。

テストコードの基本構造

// import文
// 変数・定数等の宣言

fixture('テスト内容の分類やページのタイトル等')
  .page('テストするページのURL');

test('テスト項目1', async t => {
  //...
});
test('テスト項目2', async t => {
  //...
});
test('テスト項目3', async t => {
  //...
});

fixture関数

fixture関数によって、
テストを分類します。
1つのテストファイルに少なくとも1つのfixtureを含める必要があります。
この関数が返すオブジェクトを使用して、
通常はここでテストの開始ページを指定します。
.page()の引数にテストの開始ページのURLを渡します。

ほかにも、
そのページで初期化・クリーンアップが必要であれば、
この箇所でそれを行います。

test関数

実際にテストするコードをこのtest関数に渡します。
このメソッドの第二引数として渡される
関数 async t => {...}については、この後詳しく説明します。

テストコードを渡す

test('必要項目を入力後、送信して遷移先を確認', async t => {
  //テストコード
});

// 別のテスト
test('必要項目が未入力の場合、エラーメッセージが表示される', async t => {
  //テストコード
});

Selector

Selectorはその名のとおり、
テストに必要な要素をWebページ上から取得するためのものです。
importしたSelectorコンストラクタを使用して、
通常は次の例のようにCSSセレクタ文字列を指定することで
テストに必要な要素を特定します。

要素の特定

const userName   = await Selector('#user-name');
const submitForm = await Selector('#submit-form');

また、TestCafeが提供するAPIをメソッドチェーンでつなげて
目的の要素を絞り込んでいくことが可能です。

たとえば、
次の例ではfieldset要素内で、
テキスト内容がフロントエンドエンジニアであるlableの子要素inputを取得します。

メソッドチェーンで要素を特定

Selector('fieldset').find('label').withText('フロントエンドエンジニア').child('input');

これらのメソッドにはマッチしている要素集合を絞り込む
フィルターメソッドと、
DOM階層から要素を見つけ出すメソッドの2種類が存在します。

フィルター

nth

現在の集合から、指定されたインデックス番号の要素が選択される。
インデックス番号は０始まりで、マイナス値を指定すれば、末尾からのカウントとなる。

withText

指定された文字列をテキストとして持つ要素を選択する。
大文字・小文字は区別される。

DOM階層から検索

find

現在の要素の集合から、指定されたCSSセレクタにマッチするすべての子孫要素を選択する。

child

すべての子要素を選択する。
CSSされくたやインデックス番号などの選択条件を指定することができる。

選択した要素が存在するのか、
また選択した集合がいくつあるのかをテストしたいケースもあるでしょう。
そのために、下記のプロパティが用意されています。

要素の存在や件数の確認

exists
マッチする要素が１つでも存在すれば、trueを返す。

count
マッチしている要素の件数を返す

# テストコントローラー

tは
「テストコントローラー」と呼ばれるもので、
値の入力やクリックといったアクション、
alertなどのネイティブダイアログの操作、
そして期待したとおりの動作をしているか検証するための
アサーションといったメソッドを提供します。
これらを利用して、テストコードを構築します。

test('必要項目を入力後、送信して遷移先を確認', async t => {
  //...
  await t
    // ネイティブダイアログの操作
    .setNativeDialogHandler(() => true)
    // アクション
    .typeText(userName, 'ピクセルグリオ')
    .click(submitForm)
    // アサーション
    .expect(Selector('#thanks-message').innerText).eql('...');
});

# ネイティブダイアログの操作

setNativeDialogHandlerによって、
alertやbeforeunloadのダイアログを閉じたり、
promptで任意の文字列を指定するなど
ブラウザののネイティブダイアログを操作します。

ここでは、trueを返す関数を渡しているだけですが、
これはconfirmダイアログの場合に、
「OK」を選択することを示しています。
また関数が返す値に関係なく、alertは「OK」を選択し、
beforeunloadは「このページを離れる」を選択します。
「とどまる」をエミュレートすることはできません。

comfirmとpromptについて、
条件によって処理を分けたい場合には、
関数には次の引数が渡されるので、
この引数を使って制御します。

setNativeDialogHandler((type, text, url) => {})

type
ダイアログのタイプが、
'alert'、'confirm'、'beforeunload'、'prompt' のいずれかの文字列で渡される。

text
ダイアログのメッセージが渡される

url
ダイアログが実行されたページのURLが渡される。
ダイアログがメインウィンドウ、iframeのどちらかれあ呼び出されたかを判定する場合に使用する。

# アクション

ユーザーが操作する入力欄へのテキスト入力や、
ボタンのクリックといったアクションを、
次のようなテストコントローラーから提供されるメソッドを使用して操作します。

click 	要素のクリック
typeText 	テキスト入力
pressKey 	キーボードのキー入力
hover 	要素へのホバー
drag、dragToElement 	要素のドラッグ

# アサーション

...
  await t.expect(Selector('#thanks-message').innerText)
    .eql('ピクセルグリオ様、アンケートにお答えいただき、ありがとうございました。', 'メッセージが表示されること');
...

アサーションには次のようなメソッドが提供されます。

eql 	値が等しいことを判定する。Deep Equalによる比較が行われるため、{ a : [ 1, 2 ], b : [ 3 ] }といったオブジェクトも参照が異なっていても、まったく同じ構造と値であれば等しいと判定される。
notEql 	値が等しくないことを判定する。eql同様にDeep Equalによる比較が行われる。
ok 	対象がtrueであるかを検証する。
notOk 	検証がfalseであるかを検証する。
contains 	指定した値が含まれているかを検証する。文字列と配列で検証することが可能。

ほかにも値の大小の比較の検証や、
特定の範囲内であるかの検証のためのアサーションが用意されています。
このほかのアサーションについては、公式のAssertion methodsを参照してください。

スマートアクションクエリメカニズム

同期的なアクションであれば、
アクションの直後にアサーションを実行しても問題ありませんが、
非同期な処理が含まれるとこれが問題になります。

たとえば、
サーバーにリクエストしてそのレスポンスを受けて値を取得して適用するようなケースや、
アニメーションの完了を待って最終的な状態に達するようなケースです。
こういったケースでは、アクションの直後にアサーションが実行されてしまうと、
ネットワークの状況やテストする環境のパフォーマンスにテスト結果が左右されることになりかねません。

TestCafeにはこのような問題に対応するために、
スマートアクションクエリメカニズムの仕組みが備わっています。
アサーションがパスしなかった場合に即座に失敗と判定するのではなく、
何度か再試行され、指定されたタイムアウト時間内にパスしなかった場合に失敗となります。

この値はデフォルトで3000msであり、
この値はtestcafeコマンド実行時のオプションや、
アサーションメソッドの引数にオプションを指定することで変更することができます。

コマンド実行時のタイムアウト時間の設定

testcafe chrome ./test.js --assertion-timeout 10000

アサーションメソッドでのタイムアウト時間の設定

await t.expect(Selector('#thanks-message').innerText)
    .eql('ピクセルグリオ様、アンケートにお答えいただき、ありがとうございました。', { timeout: 10000 });
    
# ClientFunction

サンプルのコードには登場していませんが、
TestCafeの重要な機能であるClientFunctionについて説明しておきます。

テスト内容によっては、
テスト実行環境上のDOMからではなく、
JavaScriptのほうからアクセスできるデータを使いたいことがあるかもしれません。
たとえば、現在のページのURLを確認したいというケースがあるでしょう。

その場合には、
ClientFunctionコンストラクタで、
Client関数を作成する必要があります。
また、その関数はawait付きで呼び出す必要があります。

import { ClientFunction } from 'testcafe';

const getWindowLocation = ClientFunction(() => window.location);

fixture('アンケートフォーム')
  .page('http://localhost:8080/01/1.html');

test('現在のページのパスを検証', async t => {
    const location = await getWindowLocation();
    await t.expect(location.pathname).eql('/01/1.html');
});

また、Client関数を作成して即座に実行し、
その後不要になるようなケースであれば、
テストコントローラー(t)のevalを使用することができます。

fixture('アンケートフォーム')
  .page('http://localhost:8080/01/1.html');

test('現在のページのパスを検証', async t => {    
    const pathname = await t.eval(() => location.pathname);
    await t.expect(pathname).eql('/01/1.html');
});

# テストコードのエラーとデバッグ

当然ですがEnd-to-Endのテストもプログラムのコードであるため、
プログラマの想定どおりにテストが動かなかったり、
それらの原因を特定するためのデバッグ機能が必要となるケースがあります。
TestCafeにはこれらをサポートするための機能が、手厚くサポートされています。

エラーの検知

仮にさきほどのテストコードで
await t.expectのメソッドにawaitの指定を忘れたとします。
そのまま、テストを実行するとコンソール上で、
次のようにわかりやすい形式で問題の箇所を指定してくれます。

エラーが発生している行に>が表示され、
上部になぜエラーになっているのかを推定したエラーメッセージが表示されます。

デバッグ機能

デバッグ機能も非常に充実しています。
テストアクションの間に.debug()メソッドを指定してテストを実行すれば、
ブレイクポイントのようにその箇所で処理が停止します。

処理を停止する

  await t
    .setNativeDialogHandler(() => true)
    // ここでテストが停止する
    .debug()
    .typeText(userName, 'ピクセルグリオ')
    .click(submitForm);

この際にデベロッパーツールのコンソール上から、
JavaScriptの処理を実行して
現在の状態を調べることが可能です。
ブラウザ下部にはテストの再開と
ステップ実行するためのボタンを含むフッターが配置されます。

ほかにも次のような機能が用意されています。

    リモートブラウザによるテストの実行
    スクリーンショット
    レポートの出力
    ウインドウのリサイズ
    テスト実行速度の指定

# Page Modelについて

E2EテストにはPage Objectsと呼ばれるよく知られているデザインパターンが存在しますが、
TestCafeでも実践的なテストを構築する際には、
これと同様のデザインパターンであるPage Modelを使用することが推奨されています。

このデザインパターンは、
Webページ上の要素を参照する処理と、
ユーザーが行うクリックなどのアクション処理を
別々のファイルに書くことで明確に役割を分担します。
E2Eテストではその性質上、
Webページ上の要素への参照が欠かせないため
UIの変更に対して脆弱になりがちですが、
要素への参照という役割が分離されていることで
要素の変更に対しての保守性を向上させることができます。

また、アクション処理だけが分離されていれば、
ユーザーのどのような操作をトレースしているのか
コードから読み取りやすくなるという利点もあります。

また、
TestCafeの公式ドキュメントのPage Modelの解説の中で紹介されている
Page Objectsの基本的な経験則には次のようなことが書かれており、
これに沿ってE2Eテストを組み立てることが推奨されています。

この経験則で紹介されている概要を説明します。

UI構造の隠蔽

Page Objectは人間が操作することや、
見ることのできるものすべてを、
ソフトウェアクライアントもできるようにしなければなりません。
GUIコントロールがデータを見つけて操作するのに必要な機構をカプセル化し、
UI構造とウィジェットの詳細を隠します。
つまり、テキストフィールドにアクセスするためには、
文字列を返すアクセサメソッドを持たなければいけませんし、
チェックボックスは真偽値を使い、
ボタン類はアクション指向のメソッド名で表される必要があります。

Page Objectsが返す値は基本的な型の値（文字列や数値、日付など）、
または他のPage Objectsにする必要があります。

Page Objectsの粒度

Page Objectと呼ばれていますが、
ページごとに作成するのではなくページ上の重要な要素に対して作成します。
そのため、たとえばヘッダーのPage Objectsや、
フッターのPage Objectsというものもあるでしょう。

アサーション

アサーションをPage Objectsに含むか含まないか開発者の間で意見が異なるケースがあるそうですが、
Page Objectsの基本的な経験則の筆者はアサーションを「含まない」ようにしているとのことです。
 TestCafeでもサンプルを確認すると、
 Page Modelにアサーションは含まれておらず、
 Page Modelを使用するテストコード側にアサーションが記述されています。
 
 ポイントとなるところを解説していきます。
 まずは、Page Modelの書き方を確認してみましょう。
 要素への参照が比較的単純なコントロールはコンストラクタ内で、
 次のようにして参照を取得します。
 
 page-model.js

 import { Selector } from 'testcafe';

 export default class Page {
   constructor () {
     // 特定の要素の参照を取得
     this.userName = Selector('#user-name');
   }
 }

 アクションやアサーションを行う処理で、
 Page Modelは次のようにしてインスタンス化されて使用されます。
 
test.js

import Page from './page-model';

const page = new Page();

test('Example test', async t => {
    await t
      // Page Model経由での参照に対してアクションを実行
      .typeText(page.userName, 'ピクセルグリオ')
});

次に少し複雑な、
ラジオボタンの特定の1要素を参照する方法を確認してみましょう。
予め、Selector()で、
すべての職種のラジオボタン要素を取得しておきます。
その後get userJobFrontend()で特定のラジオボタンの参照を取得します。

page-model.js

import { Selector} from 'testcafe';

// 予め、職種の全てのラジオボタン要素の参照を取得しておきます
const userJobs = Selector('input[name=user-job]');

export default class Page {
  constructor () {
    //...
  }

  // getを使用することで
  // プロパティのようなアクセスを可能にしています
  get userJobFrontend() {
    // 特定の1つのラジオボタン要素の参照を取得します
    // (ここでは「フロントエンドエンジニア」
    return this.userJob(1);
  }

  userJob(value) {
    // 職種のラジオボタンから、
    // 特定の1つのラジオボタンの参照を取得します
    return userJobs.filter(`[value="${value}"]`);
  }
}

公式サイトでは、
付随するテキストを利用してラジオボタンやチェックボックス要素への参照を取得していますが、
多言語対応のアプリケーションの場合に対応できないため、
valueを使った参照を使用しています。

Page Modelを利用したテストは次のように書くことができます。

test.js

import Page from './page-model';

fixture('アンケートフォーム')
  .page('http://localhost:8080/03/3.html');

const page = new Page();

test('全ての項目を入力後、送信して遷移先を確認', async t => {
  await t
    .setNativeDialogHandler(() => true)
    .typeText(page.userName, 'ピクセルグリオ')
    .click(page.userJobFrontend)
    .click(page.userSkillJavaScript)
    .click(page.address)
    .click(page.addressObtionNearKantou)
    .drag(...page.satisfactionMiddleOffsets)
    .typeText(page.note, '次回も参加します。');

  const thanksPage = await page.submitForm();
  await t.expect(thanksPage.messageText)
    .eql('ピクセルグリオ様、アンケートにお答えいただき、ありがとうございました。');
});

このテストのアクションで行っていることを
上から順に説明しますと、次のようになります。

    確認ダイアログで「OK」を選択するようにあらかじめ設定する
    名前に'ピクセルグリオ'を入力
    職種のフロントエンドエンジニアを選択
    スキルのJavaScriptを選択
    住所のプルダウンをクリック
    展開された住所のプルダウンの関東周辺を選択
    満足度のスライダーのハンドルを5まで移動
    備考に'次回も参加します。'と入力

Page Modelと役割が分担されているため、
テストを実行するtest.js側のファイルが、
どのようなアクションを実行し、どのような結果を期待するのかを
コードから読み取りやすいものになっていることがおわかりいただけると思います。
もし、Page Modelに切り分けていなければ、test.jsの内容が煩雑になります。

下記のコマンドを実行して、テストの実行内容を確認してみてください。

testcafe chrome ./03/tests/3/test.js

# Roleについて

Webアプリケーション開発の多くは、
ログインを伴うものであることがほとんどでしょう。
E2Eテストでもログイン処理は無視できない存在でbeforeXXXなどの処理で、
テスト開始前にログインを済ませるというケースが多いと思われます。
TestCafeには、このログイン処理をスムーズに行うためのRoleという概念が存在します。

次のようにRole用のファイルを用意して、
ログイン画面のURLと
各アカウントのログインのアクションを指定します。
ここでは、通常ユーザー用のuserRoleと
管理者用のadminRoleが用意されています。

roles.js

import { Role } from 'testcafe';

const loginUrl = 'http://localhost:8080/03/login.html';

export const userRole = Role(loginUrl, async t => {
  await t
    .typeText('#user-id',       'user1')
    .typeText('#user-password', 'password')
    .click('#login-button');
});

export const adminRole = Role(loginUrl, async t => {
  await t
    .typeText('#user-id',       'admin')
    .typeText('#user-password', 'password')
    .click('#login-button');
});

先ほどのtest.jsに対して、
用意した通常ユーザー用のRoleを使用してみましょう。 
まずuserRoleをimportしてします。

import { userRole } from "./roles";

アクションの最初にuseRole(userRole)を挟むことで、
通常ユーザーのアカウントに切り替えることを指示しています。

test('全ての項目を入力後、送信して遷移先を確認', async t => {
  await t
    .useRole(userRole)
    .setNativeDialogHandler(() => true)
  ...

  ファイルは次のようになります。
  
test-with-role.js

import Page from './page-model';
import { userRole } from "./user-roles";

  fixture('アンケートフォーム')
    .page('http://localhost:8080/03/3.html');

  const page = new Page();

  test('全ての項目を入力後、送信して遷移先を確認', async t => {
    await t
      .useRole(userRole)
      .setNativeDialogHandler(() => true)
      //...

    const thanksPage = await page.submitForm();
    await t.expect(thanksPage.messageText)
      .eql('ピクセルグリオ様、アンケートにお答えいただき、ありがとうございました。');
  });

  それでは、実際にテストを動かして確認してみましょう。

  testcafe chrome ./03/tests/3/test-with-role.js
  
フォームの各コントロールが操作させる前に、
ログインページに移動してログイン操作がされていることが確認できたかと思います。
また、
たとえば、通常はログイン処理後にトップページに移動する場合でも、
useRoleはそのときにテストが行われていたページに自動的に戻ってきてくれます。
この機能を使用することで、アカウントのログインと複数アカウントの切り替えが容易になります。


【ワンポイント】アカウント情報をコードに含めることについて

テストコード、テスト用のアカウントであっても、
アカウント情報をコードに含むのは極力避けるべきでしょう。
さらにE2Eテストでは、
実際の本番環境のダミー用のアカウントでテストを動かすケースもあるでしょう。
そういったケースでは環境変数にユーザーIDとパスワードを渡して、
process.envで参照すると安全です。

たとえば、CircleCIであれば、
プロジェクトの[Settings]
 -> BUILD SETTINGSの[Environment Variables]
  -> [Add Variable]
  から環境変数を設定することが可能です。

テストスピード調整

TestCafeのテストの実行速度は、
デフォルトでは最高速度で実行されます。
ただし、どのような処理が行われているのか確認したいという場合には、
この処理が速すぎて何が行われているか確認できないというケースがあります。 
そういった場合には、t.setTestSpeedを指定して、
TestCafeの実行速度を調整することができます。

test('全ての項目を入力後、送信して遷移先を確認', async t => {
  await t
    .setTestSpeed(0.5)
    .setNativeDialogHandler(() => true)
    .typeText(page.userName, 'ピクセルグリオ')
    ...

このメソッドの引数には、
1～0.01の数値を渡します。
1が最高速で0.01が最低速になります。

Remote Browsers機能

TestCafeには
マルチブラウザでのテストのことを考慮したRemote Browsersという機能が用意されています。
ブラウザ名を指定する代わりにremoteを指定して実行してみてください。

testcafe remote ./03/tests/3/test.js

すると、
次のようにURLが出力されるはずです。
このURLを
たとえばローカルと同じネットワーク下にある
VirtualBoxのブラウザのURLアドレスバーに指定してみてください。
URLを指定した直後にテストが自動的に実行され、
同様のテストが行われることが確認できるはずです。

% testcafe remote ./03/tests/3/test.js
[22:12:55]
Connecting 1 remote browser(s)...
Navigate to the following URL from each remote browser.
Connect URL: http://10.0.1.6:59726/browser/connect

またremote:2といった記述を指定することで、
複数のブラウザに対してテストを待ち受けることが可能になります。

testcafe remote:2 ./03/tests/3/test.js

次はVirtualBox上で
IE11とEdgeでのテストの実行例になります。

% testcafe remote:2 ./03/tests/3/test.js
[22:11:33]
  Connecting 2 remote browser(s)...
  Navigate to the following URL from each remote browser.
  Connect URL: http://10.0.1.6:56633/browser/connect
  CONNECTED IE 11.0.0 / Windows 10 0.0.0
  CONNECTED Edge 15.15063.0 / Windows 10 0.0.0
   Running tests in:
   - IE 11.0.0 / Windows 10 0.0.0
   - Edge 15.15063.0 / Windows 10 0.0.0

   アンケートフォーム
   ✓ 全ての項目を入力後、送信して遷移先を確認


   1 passed (12s)
   
スクリーンショット機能

テスト中の画面のスクリーンショットを撮るには、
t.takeScreenshotを使用します。 
このメソッドにスクリーンショットの画像を格納するパスを個別に指定することも可能ですが、
ここでは引数を指定せずにコマンドで格納ディレクトリを指定してみましょう。

パスはテストが実行されるパスからの相対パスになります。

test('全ての項目を入力後、送信して遷移先を確認', async t => {
  await t
    .setNativeDialogHandler(() => true)
    .typeText(page.userName, 'ピクセルグリオ')
    .click(page.userJob(1))
    .takeScreenshot('test.png')
    ...

-sオプションの後にディレクトリ名を指定します。

testcafe chrome ./03/tests/3/test-with-screenshot.js -s screenshots

実行後に
コマンドを実行した階層にscreenshotsというディレクトリが作成されるはずですので、
スクリーンショットの画像が格納されていることを確認してください。

.
├── test.png
└── thumbnails
    └── test.png

注意しておきたいのは、
このスクリーンショットの機能は先ほど紹介した
Remote Browsersの機能で使用することはできないことです。
Remote Browsersでスクリーンショットを試みると、次のようなメッセージが表示されます。

Warnings (2):
--
The screenshot and window resize functionalities are not supported in a remote browser. They can function only if the browser is running on the same machine and in the same environment as the TestCafe server.
--
Was unable to take a screenshot due to an error.

スクリーンショットの機能を使用したい場合は
TestCafeを実行する環境と
目的のブラウザが実行される環境を同じにする必要があります。

本シリーズでは
TestCafeを使用したE2Eテストの自動化について解説してきました
。第1回でも紹介したようにWebアプリケーションのE2Eテストを実務に導入しようとすると、
Seleniumという歴史あるツールと比較検討されることが多いと思います。

それぞれ一長一短があり、
判断が難しいところではあります。あくまで筆者の意見であり、
第1回で紹介したことでもありますが
BrowserStackやSauce Labsなどのクラウドブラウザのサービスのように、
Seleniumを手厚くサポートをしているサービスと連係するのであれば、
Seleniumを選択するのが賢明であると考えています。
やはり、ここは歴史あるSeleniumに一日の長があると言えます。

反対にそういったサービスを使用するほど
予算を掛けられないような小・中規模の開発で、
E2Eテストが必要になるようなケースでは、
TestCafeの導入を検討してみても良いかもしれません。
それぞれの特徴をよく理解した上で、
プロジェクトに合ったテストフレームワークを選択し、
機会があればTestCafeを試していただければと思います。
