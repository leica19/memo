
# Kubernetesはどんなことができるの?

モダンなWebサービスでは、
ユーザはアプリケーションが24時間365日利用可能であることを期待しており、
開発者はそれらのアプリケーションの新しいバージョンを1日に数回デプロイすることを期待しています。
コンテナ化は、パッケージソフトウェアがこれらの目標を達成するのを助け、
アプリケーションをダウンタイムなしで簡単かつ迅速にリリース、アップデートできるようにします。
Kubernetesを使用すると、コンテナ化されたアプリケーションをいつでもどこでも好きなときに実行できるようになり、
それらが機能するために必要なリソースとツールを見つけやすくなります。
Kubernetesは、コンテナオーケストレーションにおけるGoogleのこれまでの経験と、コミュニティから得られた最善のアイデアを組み合わせて設計された、
プロダクションレディなオープンソースプラットフォームです。

# Kubernetesの基本モジュール

## Kubernetesクラスタ

Kubernetesは、
単一のユニットとして機能するように接続された、可用性の高いコンピュータのクラスタをまとめあげます。
Kubernetesの抽象化により、コンテナ化されたアプリケーションを個々のマシンに特に結び付けることなくクラスタにデプロイできます。
この新しいデプロイモデルを利用するには、
アプリを個々のホストから切り離す方法でアプリをパッケージ化：コンテナ化する必要があります。
コンテナ化されたアプリケーションは、
アプリケーションがホストに深く統合されたパッケージとして
特定のマシンに直接インストールされていた従来のデプロイモデルよりも柔軟で、
より迅速に利用可能です。Kubernetesはより効率的な方法で、クラスタ全体のアプリケーションコンテナの配布とスケジューリングを自動化します。Kubernetesはオープンソースのプラットフォームであり、プロダクションレディです。

Kubernetesクラスタは以下の2種類のリソースで構成されています:

- マスターがクラスタを管理する
- Nodeがアプリを動かすワーカーとなる

Kubernetesは、
コンピュータクラスタ内およびコンピュータクラスタ間でのアプリケーションコンテナの配置
(スケジューリング)および実行を調整する、
プロダクショングレードのオープンソースプラットフォームです。

マスターはクラスタの管理を担当します。
マスターは、アプリのスケジューリング、望ましい状態の維持、アプリのスケーリング、新しい更新のロールアウトなど、
クラスタ内のすべての動作をまとめあげます。

Nodeは、k8sクラスタのワーカーマシンとして機能するVMまたは物理マシンです。
各Nodeにはkubeletがあり、
これはNodeを管理し、k8sマスターと通信するためのエージェントです。
NodeにはDockerやrktなどのコンテナ操作を処理するためのツールもあるはずです。
プロダクションのトラフィックを処理するk8sクラスタには、最低３つのNodeが必要です。

マスターはクラスタを管理するために、
Nodeは実行中のアプリケーションをホストするために使用されます。

Kubernetesにアプリケーションをデプロイするときは、
マスターにアプリケーションコンテナを起動するように指示します。
マスターはコンテナがクラスタのNodeで実行されるようにスケジュールします。
Nodeは、マスターが公開しているKubernetes APIを使用してマスターと通信します。
エンドユーザーは、Kubernetes APIを直接使用して対話することもできます。

Kubernetesクラスタは、物理マシンまたは仮想マシンのどちらにも配置できます。
Kubernetes開発を始めるためにMinikubeを使うことができます。
Minikubeは、ローカルマシン上にVMを作成し、
1つのNodeのみを含む単純なクラスタをデプロイする軽量なKubernetes実装です。
Minikubeは、Linux、macOS、およびWindowsシステムで利用可能です。
Minikube CLIは、起動、停止、ステータス、削除など、
クラスタを操作するための基本的なブートストラップ操作を提供します。
ただし、このチュートリアルでは、
Minikubeがプリインストールされた状態で提供されているオンラインのターミナルを使用します。



