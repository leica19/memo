
TypeScriptは、Microsoftによって開発され、
昨年（2012年）に初めて発表されたプログラミング言語です。
CodeGridでも以前紹介をしたCoffeeScriptと同様、
そのソースコードはJavaScriptに変換して利用することができます。

現在、こういったJavaScriptに変換するためのプログラミング言語は、
altJSという括りでまとめられていて、
ちょっとGoogleなどで情報を探そうと思えば、
いくらでも見つけることができる勢いで増えています。
一番有名なものは依然としてCoffeeScriptだと思われますが、
昨年の発表で大きく注目をされ、
その後も順調に開発が続けられているTypeScriptを今回は紹介していきたいと思います。

登場の背景

TypeScriptに限ったことではありませんが、
多くのaltJSが作られている背景には、
それらがJavaScriptの抱える問題に対して、
それぞれのアプローチで解決しようとしている流れがあると思います。

JavaScriptの抱える問題というと、
JavaScriptがダメというような言い方になってしまいますが、
丁寧に言い直すのであれば、現在作られるWebページがより高度になっていく中で、
JavaScriptの機能も今のままではもの足りない状況になってきているということになります。
JavaScriptの方も、こんな使われ方をするとは思ってもみなかったでしょう。

もちろんJavaScript自体の進化が考えられていないわけではありません。
JavaScriptの標準仕様であるECMAScriptの第5版は2009年にリリースされ、
第6版も仕様策定中です。
ただ、実際にはブラウザベンダ間の足並みもあり、
フロントエンドの現場では第3版仕様に従う場面も多いのではないかと思います。

TypeScriptはそういったJavaScriptの現状に対して、
新たな機能を加えてのサポートや、
ECMAScript6の仕様も見据えて作られた言語となっています。

TypeScriptの特徴

TypeScriptの大きな特徴としては
静的型付けが採用されていることが挙げられます。

ECMAScript6の仕様を先取りして取り込んでいるため、
今後の仕様に注目している方にも興味深い言語だと思います。

TypeScriptはJavaScriptのスーパーセットとして作られており、
JavaScriptの仕様を満たしながら、その機能を拡張するような位置付けになっています。
そのため、最初は多少の修正をする必要があるかもしれませんが、元のJavaScriptコードを流用して徐々に移行したり、学習を進めることができます。

CoffeeScriptはJavaScriptの冗長さを取り払って簡潔な書き方ができます。
一方、TypeScriptは書き方の変化にとどまらず、
新しい機能や、静的型付けなど、
元のJavaScriptとは違う概念も持ち込まれており、どちらかというと大規模開発向きの特質があります。
