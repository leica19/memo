開発の現場ではビルドやテストを自動化して継続的に実行していく「継続的インテグレーション」（CI）が近年普及しつつある。
CIを支援するためのツールはいくつかあるが、
今回はGitHubと連動し、
指定したリポジトリ上にあるコードを自動的に取得してビルドやテストを実行できるサービス「Travis CI」を紹介する。

「継続的インテグレーション（CI）」とは、
ソフトウェア開発過程において頻繁にテストを行うことで問題を早期に発見し、
品質の向上を図る開発手法である。
しかし、テストを毎回手動で行うのには手間がかかる。
そこで特定のタイミングで自動的にテストを実行し、
テスト完了後にその結果を通知する「CIツール」などが利用される。

CIツールとしてよく知られているものとして「Jenkins」などがあるが、
多くのツールでは独自にテストのための環境を構築しなければならない。
今回紹介する「Travis CI」はGitHubと連携した自動テスト実行サービスで、
サービス提供側のサーバー上でテストが実行されるため、
最小限の設定のみでCIを導入できる。

Travis CIはドイツのTravis CI社によって運営されているサービスだ。
Travis CI社は同社のサービスを非オープンソースのソフトウェア開発プロジェクト向けに有料で提供することで収益を得ており、
オープンソースソフトウェア向けには無償でサービスを提供している。
また、そのソースコード自体もすべてオープンソース化され、GitHub上」で公開されている。

Travis CIが持つ主要な機能としては、以下が挙げられる。

設定したGitHubリポジトリから
自動でソースコードをチェックアウトして
あらかじめ指定しておいたビルドやテスト処理を実行する
テスト結果をTravis CIのサイト上や各種API、メールなどで開発者に通知する
テストが正常に完了して問題がなかった場合、
あらかじめ指定しておいたホスティングサービスにソフトウェアをデプロイする
これらはすべてTravis CI社が運営するサーバー上で実行され、
テストを実行するための環境もTravis CIが用意してくれるため、
開発者側で独自のテスト環境を用意する必要は無い。
さらにテストの実行はリポジトリへのプッシュ時に自動的に実行されるため、
開発者はTravis CIの存在を意識せずにビルド/テスト結果を受け取ることが可能だ。

いっぽう、Travis CIはあくまでビルド/テスト環境を用意するだけであり、
当然ながらテスト自体は用意してくれない。
実行するビルドやテスト処理はリポジトリ内に配置した「.travis.yml」というファイルで記述する仕組みとなっており、
任意のコマンドが実行可能だ。
そのため、すでにプロジェクトで使用していたテストを自動実行させる、といったことも簡単に行える。

ちなみにTravis CIでは
さまざまな言語で実装されたソフトウェアのビルドおよびテストに対応している。
また、テストの実行環境はLinux（Ubuntu）となっているが、
Objective-Cで実装されたプログラム向けにMac OS X環境でテストを実行する機能も用意されている。

まずTravis CIを利用するにはGitHubのアカウントと、
テストしたいプログラムが含まれるGitHubリポジトリが必要だ。
これらを用意していない場合は、事前に用意しておこう。

また、Travis CIを無料で利用できるのは一般公開されている（publicな）リポジトリのみだ。
GitHubの有料プランを使用して作成したプライベートリポジトリをTravis CIと連携させる場合、
有料プランの契約が必要となる。
なお、その場合もプロジェクト設定を行ってから最初の100ビルド分まではトライアルとして無料で利用できる。

また、Travis CIへのログインはGitHubアカウントを利用する形で行う。
Travis CIトップページ右上の「Sign in with GitHub」ボタンをクリックすると
GitHubの認証ページが表示されるので、
そこで連携させたいアカウントが表示されているのを確認して「Authorize application」をクリックする

Travis CIにログインすると「Getting Started」画面が表示されるので、
ここでの指示に従ってテスト設定ファイルの作成やリポジトリの登録の作成を行う。

Travis CIでは、
「.travis.yml」というファイルをリポジトリのルートディレクトリ内に配置することで
ビルドやテストの設定を行う仕組みになっている。
このファイルは拡張子からも想像できるとおり、YAML形式で記述する。
さまざまな設定項目が用意されているが、
最低限必要なのはビルド環境の設定と、ビルドの際に実行するコマンドの指定だ。

# 使用する言語言語環境の設定

Travis CIでは
ビルドやテストをそれぞれ隔離された仮想環境内で実行するようになっている。
言語ごとに異なる仮想環境が用意されており、ユーザーはそこからビルドに使用する環境を選択して利用する

使用する言語環境は、
.travis.ymlファイルの最初に「language: ＜言語＞」という形で記述する。
たとえばPythonを利用するのであれば以下のようになる。

language: python

また、PythonやPerl、PHP、Rubyなど、
言語環境によってはバージョンの異なる複数の処理系が用意されているものもある。
たとえばPythonの場合、バージョン2.6および2.7、3.2～3.5、
さらに開発中のブランチ（nightly）やPyPy（Pythonで実装されたPython実行環境）でもテストを行える。
利用する言語環境については、次のように「言語環境名:」に続けてリスト形式で指定する。

python:
  - "2.6"
  - "2.7"
  - "3.2"
  - "3.3"
  - "3.4"
  - "3.5"

たとえば上記のように指定した場合、
テストはPython 2.6および2.7、3.2～3.5で実行される。
言語環境ごとに指定できるパラメータについては、
Language-specific Guidesドキュメントを参照

# 使用するライブラリや環境変数の指定

Travis CIでは、
ビルドを実行するたびに指定された言語環境に応じた仮想環境を起動して
リポジトリ内のファイルを展開し、
続いてビルド作業を実行する。
そのため、リポジトリに含まれていないライブラリなどがビルドに必要な場合は、
あらかじめそれらをインストールするよう指定しておく必要がある。

これらの作業は「installステップ」と呼ばれており、
.travis.ymlファイル内で「install:」に続けて
インストール処理を記述することで処理内容を指定できる。

PythonやRuby、Perlなどのライブラリを利用したい場合は、
各言語で提供されるパッケージマネージャを利用してパッケージのインストールを行える。
たとえばPythonであれば次のようにpipコマンドが利用できる。

install:
  - pip install ＜インストールするパッケージ＞

同様にRubyであればgemコマンドやbundleコマンド、
Perlであればcpanmコマンドでパッケージのインストールが行える。
もちろん、複数のコマンドを記述することも可能だ。その場合、記述された順番で処理が実行される。

また、Travis CIで利用されるコンテナは言語環境としてObjective-Cを選択した場合を除いて
Ubuntuで構築されており、次のように指定することで特定のソフトウェアパッケージをインストールできる。

addons:
  apt:
    packages:
    - ＜パッケージ名1＞
    - ＜パッケージ名2＞
    ：
    ：
