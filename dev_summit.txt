
# エンジニア・キャリアについて

CTO

技術面の責任と意思決定
会社にとっての技術戦略

エンジニアのマネジメント

プロダクトの責任
事業をプロダクト面から支える

会社の方針を踏まえた開発方針とスケジュールの策定

契約書のレビュー

コミュニティが小さいからこそ、密接な関係を作りやすい。
yahoo: osaka mix leap, umeda.go

情報収集

自己研磨

プライベートな時間での新技術への挑戦など自己研磨の意識が重要

定期的なプライベイトでのアウトプット

自分は何で飯が食えているのか。

GitHubスター数

OSSを書いてみる

ビジネスの理解ができるエンジニアは希少

エンジニアはアプトプットしやすい職業なので、どんどんアピールする

# sansan

# 技術力で勝負しない

業務で使わない技術まで学んでいる。楽しくてやってるだけ

仕様決め

エンジニアとデザイナーとのやりとり

ドメイン知識を得るためにお客さんの会社で仕事をしていた
＝＞希少価値が高い

マネジメント
＝＞重宝されるけど、希少価値は下がってきている

企画と開発が分断されていない環境大事

越境して仕事をすることが歓迎される文化

# レガシーコード

言葉が大切

理解に時間がかかる。開発に時間がかかる。

レガシーにも理由がある。

大きい物を小さく

対象を整理＝＞ドメイン駆動設計

モダン開発のメリデメをしっかりと

モダンな方法の概要をしる

レガシーの課題を探る

# 海外カンファレンス

# はてなさん

# 何屋

Docker Osaka

肩書きがない。権限がない。人脈がない。
＝＞既成事実を作る

とにかくアウトプットする

# カオス

# モノタロウ

テストコードがない
依存性の高いシステム
技術的負債の多いシステム

クリーン・アーキテクチャ
＝＞関心の分離、一方向への依存関係

デメリット
＝＞ファイル数が多くなる。開発に時間がかかる。

独自フレームワーク＋テストコードなし＋新機能の拡張＋独自フレームワーク開発者の退職

独自フレームワークから脱却したい。

ファイル数が多くなる。差分がでかくなりがち
＝＞対策：リリースの単位を小さくする。
