Service Workerとは、
Webページの裏側で働く独立したJavaScript環境です。
Service Workerを利用すると、
Webページのオフライン対応をはじめ、
これまでのWebではできなかった機能が実現できます。

Service Workerは2016年10月現在、
Chrome、Firefox、Operaの各ブラウザがすでにサポートをしています。
Microsoft Edgeは開発中、Safariは検討を進めています。
それぞれのブラウザの実装状況はIs ServiceWorker ready?のページで確認できます。

    Service Workers

また現在、
Progressive Web Apps（略してPWAとも呼ばれる）という言葉を聞いたことがある方もいるかと思います。
これは簡単にいえば、
モバイル用Webアプリケーションという文脈において、
ネイティブのように動作するものを作ろうという考えです。

PWA自体はなにか新しい機能を指すものではなく、
ただブラウザの機能の集合に名前を付けたものです。

そんなPWAの構成要素としてService Workerは
なかなか大事な位置にある技術で、
これからのWebの体験を向上させる技術として注目に値する

先に述べたように、Service Workerとは、
Webページのバックグラウンドで動くもう一つのJavaScript環境です。
Service Workerが一度Webページからインストールされると、
Webページとは独立したライフサイクルの中で動作します。
たとえば、オフライン状態でも、
Webページを表示していたタブが閉じていても、
必要があればService Workerが作動します。

これでどんなことができるようになるのかというと、
次のような例が挙げられます。

    Webページからのリクエストに反応し、
    以前に取得していたキャッシュを返却することでオフラインな状況でも動作する
    Webページを開かなくてもバックグラウンドで最新の情報に更新する
    Webページからのプッシュ通知を受け取る

ただ、これらのことはService Workerだけで実現する機能ではありません。
Service Workerを土台にして、
Fetch API、Cache API、Push API
といった別の機能を組み合わせることで実現する機能です。

Service Worker自体は、
最初に書いたとおりWebページの裏側で動くJavaScript環境でしかありません。
ですが、
そんなService Workerと、
ほかの新たな機能を組み合わせることで、
これまでのWebにはできなかった機能を提供できる可能性を持っています。

# ライフサイクル

Service WorkerはWebページから独立したライフサイクルの中で動作すると前述しました。
ライフサイクルとは、一般的には、生物が生まれてから死んでいくまでの流れや、
ある製品の発売から売上が変化していく様子を表したものなどを指す言葉です。
プログラミングにおいてはたいてい、あるプログラムが起動して終了するまでの間、
そこで起こる出来事、その周期を指します。

Webページでいえば、あるページが開かれて閉じられるまでの間、
JavaScriptのコードでいえば、あるインスタンスを初期化してそれが破棄されるまでの間、
という具合になるでしょう。

そして、ライフサイクルの中ではそうしたものたち自身に関するさまざまなイベントが発生します。
Webページであればページが開かれる、ページが遷移する、
ページが閉じられるなどのイベントです。
普段、開発者はそうしたイベントに対して処理を行うコードを書いていく場面があるでしょう。

Service Workerも同じようにライフサイクルを持ち、
その中でイベントが発生していきます。
Service Workerは、Webページやその中にあるDOMのように、
目で見てその状態を把握しやすいものではありません。
ですので、どのようなライフサイクルやイベントを持っているのかを把握しておくことで、
Service Workerの全体像も理解しやすくなると思います。

# Service Workerが持つ6つの状態

parsed

parsedは初期状態です。
Service Workerはまだインストールされておらず、
まだService Workerとして呼び出されたスクリプトが読み込まれたくらいの段階です。
すぐさま次の状態へ遷移するため、あまり意識することはありません。

installing

installingは名前のとおり、Service Workerをインストールしている最中の状態です。
Service Workerの新規インストールか、あるいは更新されている場合にもこの状態をとります。

この際にService Workerのライフサイクルイベントであるinstallイベントが発生しており、
Service Worker側のJavaScriptではこのイベントをハンドリングして
必要に応じた（たとえばキャッシュを構築するような）インストール処理を行うこともできます。

すでに有効なService Workerがインストール済みで、
更新もされていない場合にはactivatedまでスキップされます。

installed

installedは先のinstalling状態を問題なく通過した状態です。
この段階でService Workerのインストールには成功していますが、
まだService Workerは有効になっていません。

Service Workerを新規インストールしている場合には、すぐに次のactivating状態へと遷移します。
Service Workerを更新してる場合には、古いService WorkerがまだWebページを制御しているので、
新しいService Workerはこの状態に留まります。

この状態に留まった新しいService Workerが有効になるには、ユーザーがWebページから離れるなどして、
ブラウザが安全に古いService Workerを解放できた
後に再度Webページを開くことで、
次のactivating状態に移る必要があります。
また、この状態はオンライン上のドキュメントではwaitingと呼ばれることも多いです。

activating

installedの次の状態がactivatingです。
Service Workerの新規インストール時には前段階のinstalledからすぐにこの状態になります。
更新の場合には、古いService Workerに代わって新しいService Workerが有効になる段階です。

installingのときと同じように、
activating時にはライフサイクルイベントのactivateイベントが発生します。
Service Worker側のJavaScriptでは
イベントをハンドリングして必要に応じた処理（たとえば古いキャッシュを破棄するような）をすることもできます。

activated

Service Workerが、
対象のWebページを問題なく制御下に置いた状態です。

この状態でService WorkerはWebページからのリクエストに反応するfetchや、
Webページからのメッセージを受け取るmessageイベントを待つことができます。

redundant

次の理由でService Workerが無効となった状態です。

    installイベント中にエラーが発生した
    activateイベント中にエラーが発生した
    新しいService Workerと置き換えられた

# Service Workerのセキュリティ

HTTPS（またはlocalhost）で動かすこと

Service Workerの機能はとても強力です。
キャッシュを利用したオフライン対応などの用途に使うのであればよいのですが、
悪意を持った者がWebページのリクエストを盗み取るためにService Workerを利用しては問題です。
そのため、Service WorkerはHTTPS（あるいはlocalhost）で提供されているWebページでしか登録できません。
これによって、Service Workerが改ざんを受けていないことを保証しています。

Service Workerは
読み込まれたオリジンと同一のオリジンを持つWebページにしか効力を持ちません。
たとえば、https://www.pxgrid.com/から登録されたService Workerは、
https://app.codegrid.net/にあるWebページを制御下に置くことはできません。

オリジンが同一であるというのは、
ホストだけでなくURIスキームとポートも同一であることが求められます。
ですので、スキーム違いとなるhttp://app.codegrid.net/とhttps://app.codegrid.net/、
ポート違いとなるhttps://app.codegrid.net:80/とhttps://app.codegrid.net:81/は
同一オリジンとなりません。

# スコープにしたがう

Service Workerは
その役割を担うスクリプトファイルが置かれているパスよりも
上位のパスにあるWebページを制御下に置くことは、基本的にはできません。

Service Workerのスクリプトが/sw.jsにあるのなら、
同一オリジンにあるすべてのWebページを制御下に置くことができます。

そうではなく、スクリプトが/scope/sw.jsにあるのなら、
/scope/index.htmlや/scope/foo/bar.htmlのように/scope/より下層のWebページのみを制御できます。
/out-of-scope/index.htmlのようなパスにあるページは制御できません。

DOMにアクセスすることはできない

Service Workerから
Webページ側のDOMに直接アクセスはできません。
DOMの操作はWebページに行ってもらいます。

状態の永続化

Service Workerは必要なときに起動するので、
イベントハンドリング中になにか値を変数に保持しておいたとしても、
次のイベントハンドリングの際には消えてしまいます。
そのため、イベントの間で持続する情報を保持したい場合にはIndexedDBを使う必要があります。
複数のページ間でのデータのやり取りが手軽にできるものではないと思っておいたほうがよいでしょう。

# Service Workerの登録

Service Workerを登録するには
Webページ上で動いているJavaScriptから、
Service Workerとして働く別のJavaScriptファイルを指定します。
ブラウザに、「これをService Workerとして使ってね」ということを伝えるわけです。
このときに使うのは
ServiceWorkerContainerオブジェクトが持つ.register()メソッドです。

ブラウザからは
navigator.serviceWorker.register()
で呼び出せます。

構文は次のとおりです。

ServiceWorkerContainer.register(scriptURL, [options])

引数scriptURLには
Service Workerとして登録するJavaScriptファイルのパスを指定します。
任意でoptionsに設定オブジェクトを渡すこともできます。

optionsにはいまのところ、
scopeオプションを指定できます。
これは第1回に説明したスコープの指定を任意で行うものです。
省略した場合は、
Service Workerとして登録される
JavaScriptファイルの置かれているパスが設定されます。

戻り値はService Workerの登録成否を伝えるPromiseオブジェクトです。

簡単にコードにしてみると次のようになります。
Service Workerに対応していない環境を無視するように、
if ('serviceWorker' in navigator) {...}のブロックで囲んでおくとよいでしょう。
Service Workerとして使うJSファイルの名前はなんでも構いませんが、
この記事では一律service-worker.jsとしていきます。

if ('serviceWorker' in navigator) {
  const options = {
    scope: './'
  };

  navigator.serviceWorker.register('./service-worker.js', options)
    .then(registration => {
      console.log('Service Workerの登録に成功しました。');
    })
    .catch(error => {
      console.error('Service Workerの登録に失敗しました。', error);
    });
}

登録の成功時に
Promiseから受け取るregistration引数には
ServiceWorkerRegistrationオブジェクトが渡ってきます。
これはService Workerの登録情報などを持ったオブジェクトです。

ここで、通信がHTTPSではない、
service-worker.jsが存在しない、
service-worker.jsに構文エラーがあったりなどすると
.catch()側のコールバックが呼ばれます。

詳細は順を追って説明していくので、
service-worker.jsはとりあえず次のようなコードでも構いません。
これで、何もしないService Workerがインストールされ、
インストールが成功すると、
「service-worker.jsが読み込まれました。」とコンソールログに表示されることになります。

console.log('service-worker.jsが読み込まれました。');

この.register()メソッドは
ブラウザ側でService Workerが登録済みかどうかを調べてくれるので、
こちらで登録済みかどうかを気にせずに呼び出して構いません。
登録済みであれば、
Promiseの結果は登録成功の側に振り分けられ、
そのコールバックが呼ばれます。

また、service-worker.jsの内容が更新されているかどうかも判定しています。
新規の登録か、更新されている場合には、
次節以降に紹介するinstallイベントなどが発生するようになっています。

なお、Service Workerの動作確認には、
Chromeでいうところのシークレット ウィンドウの機能を使うと便利です。
古いService Workerやキャッシュが残らないので、
新しくService Workerを登録した場合の挙動を確認しやすくなります。
Firefoxの場合は、
いまのところ同様の機能のプライベートブラウジングで
Service Workerが使えないようなので、この方法はとれません。

# ブラウザの開発者ツールでService Workerの状況を確認する

Chromeであれば、まずDevToolsを開いて、
「Application」タブを選択、
左のメニューから「Service Workers」を選択すれば
右のパネルに登録されているService Workerの状況が表示されます。

Firefoxの場合は、
about:debugging#workersへアクセスするか、
アプリケーションメニューの「ツール」、
「Web開発」、「Service Worker」と
選択していくことでService Workerの状況が表示されます。

# Service Workerのインストール

installイベント

Service Workerは、
新規に登録されるか更新があった場合に
installing状態へ遷移し、installイベントが発生します。
このイベントでは名前のとおりService Workerのインストールに関する処理ができます。
主にキャッシュの構築に利用することになるでしょう。

イベントリスナーの登録には
self.addEventListener()を使います。
次のようなコードをservice-worker.jsに加えることで
installイベントに反応する処理が書けます。

self.addEventListener('install', event => {
  console.log('Service Workerのinstallイベントが発生しました。');
});

ちなみに、installイベントのハンドリングは必須ではありません。
もしinstallイベントリスナーを設定しなかった場合でも
Service Workerの登録は問題なく進行します。

インストールに関する処理を安全に行うためには、
その間、Service Workerの登録が進んでいくのを待っていてもらわなくてはいけません。
そのためのメソッドが、
installイベントのコールバックが受け取るExtendableEventオブジェクトが持つ
.waitUntil()メソッドです。

構文は次のとおりです。

ExtendableEvent.waitUntil(promise)

引数promiseは
Promiseオブジェクトを受け取り、
そのPromise内部で行われる処理がresolveに至るまでService Workerが
次の状態へ進まないことを保証します。
つまり、Promiseが解決するまでinstalling状態のままで待ち続けます。

次のコードは、
.waitUntil()が状態の遷移を待機させることを確かめるだけの例です。
この例では5秒間だけinstallイベントの完了を待たせます。

self.addEventListener('install', event => {
  event.waitUntil(
    new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve('インストール成功'):
      }, 5000);
    })
  );
});

もし、インストール中の処理に問題があって、
このインストールは失敗であるとブラウザに伝えたい場合は、
.waitUntil()に渡しているPromiseオブジェクトをrejectさせます。

次のコードはinstallイベントを5秒後に失敗させるだけの例です。

self.addEventListener('install', event => {
  event.waitUntil(
    new Promise((resolve, reject) => {
      setTimeout(() => {
        reject(new Error('インストール失敗'));
      }, 5000);
    })
  );
});

こうなった場合、
Service Workerはredundant状態へと遷移して、
登録は行われず、ブラウザ側に副作用は残しません。
また再度ページを開くなどしてService Workerが登録されれば
ブラウザは再びインストールを試みます。

# Service Worker登録方法の未来

今回は安定版としてリリースされている
ChromeやFirefoxで使える
Service Workerの登録方法を紹介しました。

一方、最新の仕様ではHTMLの<link>タグを使った方法や、
HTTPヘッダを使った方法で
Service Workerの登録が可能であることが書かれています。

たとえばこのようなHTMLを用意するだけで、
Service Workerを登録できるようになります。

<head>
  <meta charset="utf-8">
  <title>Service Worker Example</title>
  <link rel="serviceworker" href="./service-worker.js" scope="./" />
</head>

# リリースをキャッシュする

それでは、
前回紹介したinstallイベント中にリソースをキャッシュとして保存してみましょう。
この、installイベント中に
キャッシュを行うパターンは、
Webページの動作に必要な静的リソース（画像、CSS、JS、フォントなど）のキャッシュに向いています。

キャッシュ周りの操作には
Cache APIを使う必要があるので、まずはその説明から始めていきます。

Cacheオブジェクトを開く

Cache APIに対応したブラウザであれば、
グローバル空間の変数cachesを通じてCacheStorageオブジェクトにアクセスできます。
CacheStorageは
複数のCacheオブジェクトというものを管理できます。
そして、そのCacheオブジェクトが実際のキャッシュの追加や更新、削除を行います。

手順としては、
CacheStorageから任意のCacheを開き、
Cacheにリソースをキャッシュしてもらうという流れになります。

CacheStorageオブジェクトからCacheを取得するには、
.open()メソッドを呼び出します。構文は次のようになります。

CacheStorage.open(cacheName)

引数cacheNameには
Cacheオブジェクトの名前を文字列で指定します。
これはキャッシュの種類やバージョンを指定するために用います。
こうして複数のCacheオブジェクトを持てることで、
一度新しいキャッシュを取得してから、
古いキャッシュを削除するという運用が可能になります。

一致するcacheNameが存在したら
そのCacheオブジェクトを取得、存在しなければ新しく作成してそれを取得します。

戻り値は
Cacheオブジェクト取得時にresolveするPromiseになっているので、
.then()でCacheオブジェクトを取得します。

次のコードはCacheStorageから
'cache-v1'という名前のCacheオブジェクトを取得、
あるいは作成して取得する例です。

＃ CacheStorageのopen()メソッドでCacheオブジェクトを取得

caches.open('cache-v1').then(cache => {
  // 変数cacheからCacheオブジェクトにアクセス可能
});

Cacheオブジェクトにキャッシュを追加する

Cacheオブジェクトが手に入ったら、
そこにキャッシュしたいリソースを追加していきます。

ここでは、Cacheオブジェクトの
.addAll()メソッドを紹介します。
このメソッドは
配列に渡したパスを対象にすべてをキャッシュさせることができます。

このメソッドも戻り値はPromiseになっていて、
キャッシュの完了時にresolveになる。

caches.open('cache-v1')
  .then(cache => {
    return cache.addAll([
      '/path/',
      '/path/index.html',
      '/path/app.js',
      '/path/image.jpg'
    ]);
  })
  .then(() => {
    console.log('キャッシュが完了しました。');
  });

これで、
CacheStorageからCacheを取得して
リソースをキャッシュさせるコードができました。
あとは、これをinstallイベント中に行うとよいでしょう。

# installイベント中にキャッシュを行う

すでに紹介したinstallイベントのハンドリングと、
キャッシュ取得のコードを組み合わせます。

ExtendableEventの.waitUntil()メソッドは
引数にPromiseを期待します。
そして、CacheStorageの.open()メソッドも
Cacheオブジェクトの.addAll()メソッドも
Promiseを戻り値としているので、これらはうまくつなげられます。

self.addEventListener('install', event => {
  event.waitUntil(
    caches.open('cache-v1')
      .then(cache => {
        return cache.addAll([
          '/path/',
          '/path/index.html',
          '/path/app.js',
          '/path/image.jpg'
        ]);
      })
      .then(() => {
        console.log('キャッシュが完了しました。');
      })
  );
});

これで、Service Workerを登録することで
指定したパスのリソースがキャッシュされるコードができました。

ChromeとFirefox、
それぞれ次の方法でキャッシュされたリソースの状況を確認できます。
Service Workerをインストール後に一度ページをリロードしてみてください。

# キャッシュしたレスポンスを返す

ここまでの処理では
リソースをキャッシュに追加しただけでまだ何の用途にも使っていません。
ブラウザのリクエストに対応したキャッシュを返す処理も実装する必要があります。

大体の流れとしては次のようなことをします。

    ブラウザからのリクエストをキャッチする
    キャッチしたリクエストと対応するキャッシュがあるか調べる
        ある場合はそのキャッシュを返す
        ない場合は通常どおりリクエストを続けてもらう

# ブラウザからのリクエストをキャッチする

最初にブラウザからのリクエストをキャッチするという手順があります。
これにはService Worker内で
fetchイベントのハンドリングを行うことで可能となります。

次のコードは
fetchイベントをキャッチした上で、
何もせずに通常のリクエストにフォールバックさせるだけのコードです。
.addEventListener()のコールバック関数内でただreturnすると、
そうした挙動になります。

self.addEventListener('fetch', event => {
  // ブラウザからのリクエストを横取りできる。
  // リクエストに対して何もしない場合は単にreturnするだけでよい。
  return;
});

コード中の引数eventには
FetchEventオブジェクトが渡ってきます。
このFetchEventの.respondWith()メソッドを使うことで、
ブラウザに対するレスポンスをすり替えられます。

構文は次のとおりです。

FetchEvent.respondWith(response)

引数responseは、Responseオブジェクトか、
resolve時にResponseオブジェクトを取得できる
Promiseオブジェクトを受け取ります。

次のコードはfetchイベントをキャッチして
'hello'というテキストだけを
レスポンスとして返す例です。ただ、これは説明のための極端な例で、
このService Workerを実際に登録すると
ブラウザからのあらゆるリクエストに対するレスポンスが'hello'に置き換わってしまいます。


ブラウザに返すレスポンスをすり替える

self.addEventListener('fetch', event => {
  event.respondWith(new Response('hello'));
});

ここまでの内容に
Responseオブジェクトというものが登場していますが、
これはFetch API仕様に含まれる、
リクエストのレスポンスを表すオブジェクトです。
今回はService Workerとキャッシュについて
焦点を当てていくのでResponseオブジェクト自体には深く触れず次に進みます。

# リクエストに対応するキャッシュを調べる

次はリクエストに対応するキャッシュがあるのかどうかを調べる方法についてです。

CacheStorage.match(request)

引数requestは
Requestオブジェクトを受け取ります。
戻り値は、
resolve時にキャッシュに該当する
Responseオブジェクトを取得できるPromiseオブジェクトです。

Requestオブジェクトは、
先述したResponseオブジェクトと同じくFetch API仕様に含まれる、
リソースへのリクエストを表したオブジェクトです。

そのRequestオブジェクトですが、
FetchEventオブジェクトが
.requestプロパティに持っているので、
Service Worker内でfetchイベントを掴んで
キャッシュを探索するという場面ではそれを使えばよいです。
caches.match(event.request)というようにします。

リエクストに対応するキャッシュを探す

self.addEventListener('fetch', (event) => {
  event.respondWith(
    caches.match(event.request)
      .then(response => {
        // 該当するキャッシュが存在したかチェックする
      })
  );
});

リクエストに対応するキャッシュがなかった場合には、
コード中のcaches.match()の戻り値であるPromiseはresolveとなりますが、
値は何も渡されません（変数responseはundefinedとなります）。
ですので、最終的にはresoleve時のコールバック内でキャッシュの存在を確かめることになります。

その点も反映したコードが次の例になります。
キャッシュが存在したら、それをそのままreturnします。
存在しない場合はfetch()を使って通常のリクエストのとおり、
オンライン上のリソースを探します。


キャッシュが存在したかどうかを確認してレスポンスを返す

self.addEventListener('fetch', (event) => {
  event.respondWith(
    caches.match(event.request)
      .then(response => {
        if (response) {
          return response;
        }
        return fetch(event.request);
      })
  );
});

fetch()はFetch API仕様に含まれる、オンライン上のリソースをリクエストするメソッドです。
Promiseを返すなど従来のXHRよりもモダンなインターフェースを持ち、
XHRよりも低レベルな制御が行えます。
将来的にXHRと置き換わっていくと思われます。
Service Worker内で使える実装から始まっていて、
現在はブラウザのメインスレッド内で動く実装も進んでいます。

キャッシュの方法には他にもいろいろあり、
ユーザーの操作によってキャッシュを行うパターン（たとえば好きな記事をオフラインで読める機能）、
リクエスト時に、次回のアクセスを高速化するためにキャッシュもついでにしておくパターンなど、
提供したい機能やリソースの種類によってキャッシュの方法は変わっていきます。

# Service Workerを更新する

登録されているService Workerは、
その制御下にあるページを開くたびに更新が確認されます。
ですから、こちらで行うことは、Service Workerに変更を加えてWebに反映するだけです。
そうすると、ブラウザのほうでは自動的に新しいService Workerに更新してくれます。

ただし、Service Workerの更新には次のようなちょっとした仕組みがあるので、
このあたりも理解しておくとよいでしょう。

Service Workerはいつ新しくなるのか

Service Workerの更新が検知され、
有効なService Workerとして再度インストールされたとしても、
すぐにWebページを制御下に置いて動作を始めるわけではありません。
どうしてかというと、そのタイミングではまだ既存のService Workerが動作中であり、
安全な切り替えができないためです。

新しいService Workerが動作を始めるためには、
一度、古いService Workerが動作しているページが閉じられる必要があります。

新しいService Workerへ切り替わったと思っているのに実際にはそうでない場合、
まだどこかにWebページを開いているウィンドウかタブが残っているのかもしれません。
デモをローカルサーバーで起ち上げて試してみる際も、気をつけてください。

新しいキャッシュを構築する

この記事では、
新しいバージョンのCacheオブジェクトを作成して、
そこに新しいキャッシュを構築する方法を紹介します。
基本的に、やり方は前回解説した方法とほとんど一緒です。

前回説明した、Cacheオブジェクトを開く際のコードを再掲します。
CacheStorageのopen()メソッドでCacheオブジェクトを取得

caches.open('cache-v1').then(cache => {
  // 変数cacheからCacheオブジェクトにアクセス可能
  // 変数cacheからCacheオブジェクトにアクセう可能
});

このときはcaches.open()を使って
'cache-v1'という名前のCacheオブジェクトを開いていました。

今回は新しいCacheオブジェクトを作って
そこへ新しいキャッシュを作りたいので、
'cache-v1'とは違う名前を指定します。
引数を変えて新しいCacheオブジェクトを開く

caches.open('cache-v2').then(cache => {
  // 新しく作られたCacheオブジェクトにアクセス可能
});

'-v1'、'-v2'という名前の付け方は、
バージョンを明示するというひとつの方法例です。
仕様の面からいえば、既存のCacheオブジェクトと違う名前の指定さえできていれば、
新しいCacheオブジェクトは作れます。

そうして新しいCacheオブジェクトを開いたら、
これを使ってキャッシュするファイルを具体的に指定していきます。
installイベントを捕捉するところまで含めた全体的なコードは次のようになります。

self.addEventListener('install', event => {
  event.waitUntil(
    // 新しいCacheオブジェクト名を指定
    caches.open('cache-v2')
      .then(cache => {
        // 必要に応じて新しいキャッシュ対象ファイルを指定
        return cache.addAll([
          '/path/',
          '/path/index.html',
          '/path/app-v2.js',
          '/path/image-v2.jpg'          
        ]);
      })
      .then(() => {
        console.log('キャッシュが完了しました。');
      })
  );
});

先に述べたように、
前回例示したコードとほとんど変わりありません。ポイントは次の2点だけです。

    新しいCacheオブジェクトを作る
    新しいCacheオブジェクトにキャッシュを構築する

次の画像は、サンプルコードの環境で新しいキャッシュを作った後に
開発者ツールからキャッシュの状況を確認した図です。
Cacheオブジェクトが2つになっていることがわかるかと思います。

この段階ではまだ古いキャッシュも残っており、
'-v1'と'-v2'両方のキャッシュが存在することになります。
古いキャッシュの扱いについては次の節で説明します。

古いキャッシュを削除する

使わなくなったキャッシュなのであれば、
きれいに削除しておきたいものです。
古いService Workerから新しいService Workerに切り替えが完了したら、
もう古いService Workerが使われることはありません。
そのようなタイミングになったら、
新しいService Workerは、今後使われることのないキャッシュを安全に削除できます。

そのタイミングを捕捉できるイベントがactivateイベントです。
これは新しいService WorkerがWebページを制御できるようになったら発行されるイベントです。

使い方はinstallイベントの扱いと同様です。
Service Worker側のスクリプトでself.addEventListener()を用います。

activateイベントを捕捉するコード

self.addEventListener('activate', event => {
  // ここにキャッシュを削除するコードを書く
});

キャッシュを削除するメソッド

次にCacheStorageが持つキャッシュを削除するメソッドを紹介します。

シリーズの中でこれまで、
Cacheオブジェクトを開く.open()、
リクエストに対応するキャッシュが存在するかを確認する.match()メソッドの紹介をしていますが、
削除に使うのは.delete()メソッドです。

構文としては次のようになっています。
引数cacheNameにはCacheオブジェクトの名前を指定するようになっていて、
今回の例で使っているような'cache-v1'のような文字列が入ります。

これを使うと、
引数に指定した1つのCacheオブジェクトが消えることになります。

CacheStorage.delete(cacheName)

戻り値はPromiseオブジェクトです。
Cacheオブジェクトが見つかり、削除できればtrueの値を渡しつつresolve、
それ以外の場合はfalseの値を渡しつつresolveとなります。

これを、activateイベントのハンドリングの中で使います。
activateイベントもinstallイベントと同様にevent.waitUntil()を使って、
非同期な処理の完了を待たせることができます。

activateイベント中に古いCacheオブジェクトを削除する

self.addEventListener('activate', event => {
  event.waitUntil(caches.delete('cache-v1'));
});

ここまでの内容で、
新しく'cache-v2'のキャッシュを作り、
古くなった'cache-v1'のキャッシュを削除できることを説明しましたが、
まだよいコードにする余地があります。
